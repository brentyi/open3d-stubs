from typing import Any, ClassVar, List, Set, overload

import numpy as np
import numpy.typing as npt
from typing_extensions import Annotated

Kinect2ColorCameraDefault: PinholeCameraIntrinsicParameters
Kinect2DepthCameraDefault: PinholeCameraIntrinsicParameters
PrimeSenseDefault: PinholeCameraIntrinsicParameters

class PinholeCameraIntrinsic:
    height: int
    intrinsic_matrix: npt.NDArray[Annotated[np.float64, "3,3"]]
    width: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    @overload
    def __init__(self, width, height, intrinsic_matrix) -> None: ...
    @overload
    def __init__(self, width, height, fx, fy, cx, cy) -> None: ...
    @overload
    def __init__(self, param) -> None: ...
    def get_focal_length(self) -> Any: ...
    def get_principal_point(self) -> Any: ...
    def get_skew(self) -> Any: ...
    def is_valid(self) -> Any: ...
    def set_intrinsics(self, width, height, fx, fy, cx, cy) -> Any: ...
    def __copy__(self) -> PinholeCameraIntrinsic: ...
    def __deepcopy__(self, arg0: dict) -> PinholeCameraIntrinsic: ...

class PinholeCameraIntrinsicParameters:
    __members__: ClassVar[dict] = ...  # read-only
    Kinect2ColorCameraDefault: ClassVar[PinholeCameraIntrinsicParameters] = ...
    Kinect2DepthCameraDefault: ClassVar[PinholeCameraIntrinsicParameters] = ...
    PrimeSenseDefault: ClassVar[PinholeCameraIntrinsicParameters] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PinholeCameraParameters:
    extrinsic: npt.NDArray[Annotated[np.float64, "4,4"]]
    intrinsic: PinholeCameraIntrinsic
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: PinholeCameraParameters) -> None: ...
    def __copy__(self) -> PinholeCameraParameters: ...
    def __deepcopy__(self, arg0: dict) -> PinholeCameraParameters: ...

class PinholeCameraTrajectory:
    parameters: List[PinholeCameraParameters]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: PinholeCameraTrajectory) -> None: ...
    def __copy__(self) -> PinholeCameraTrajectory: ...
    def __deepcopy__(self, arg0: dict) -> PinholeCameraTrajectory: ...

__all__ = [
    "Kinect2ColorCameraDefault",
    "Kinect2DepthCameraDefault",
    "PrimeSenseDefault",
    "PinholeCameraIntrinsic",
    "PinholeCameraIntrinsicParameters",
    "PinholeCameraParameters",
    "PinholeCameraTrajectory",
]
