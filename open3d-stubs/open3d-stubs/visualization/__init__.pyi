from typing import Any, Callable, ClassVar, Dict, Iterator, List, Set, overload

import numpy as np
import numpy.typing as npt
import open3d.camera
import open3d.geometry
import open3d.t.geometry
import open3d.utility
import open3d.visualization.gui
import open3d.visualization.rendering
from typing_extensions import Annotated

from . import app, gui, rendering, webrtc_server

Color: MeshColorOption
Default: MeshColorOption
Normal: MeshColorOption
XCoordinate: MeshColorOption
YCoordinate: MeshColorOption
ZCoordinate: MeshColorOption

class Material:
    material_name: str
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Material) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def is_valid(self) -> bool: ...
    def set_default_properties(self) -> None: ...
    @property
    def scalar_properties(self) -> ScalarProperties: ...
    @property
    def texture_maps(self) -> TextureMaps: ...
    @property
    def vector_properties(self) -> VectorProperties: ...

class MeshColorOption:
    __members__: ClassVar[dict] = ...  # read-only
    Color: ClassVar[MeshColorOption] = ...
    Default: ClassVar[MeshColorOption] = ...
    Normal: ClassVar[MeshColorOption] = ...
    XCoordinate: ClassVar[MeshColorOption] = ...
    YCoordinate: ClassVar[MeshColorOption] = ...
    ZCoordinate: ClassVar[MeshColorOption] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class MeshShadeOption:
    __members__: ClassVar[dict] = ...  # read-only
    Color: ClassVar[MeshShadeOption] = ...
    Default: ClassVar[MeshShadeOption] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class O3DVisualizer(gui.WindowBase):
    class DrawObject:
        def __init__(self, *args, **kwargs) -> None: ...
        @property
        def geometry(self) -> object: ...
        @property
        def group(self) -> str: ...
        @property
        def is_visible(self) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def time(self) -> float: ...

    class Shader:
        __members__: ClassVar[dict] = ...  # read-only
        DEPTH: ClassVar[O3DVisualizer.Shader] = ...
        NORMALS: ClassVar[O3DVisualizer.Shader] = ...
        STANDARD: ClassVar[O3DVisualizer.Shader] = ...
        UNLIT: ClassVar[O3DVisualizer.Shader] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class TickResult:
        __members__: ClassVar[dict] = ...  # read-only
        NO_CHANGE: ClassVar[O3DVisualizer.TickResult] = ...
        REDRAW: ClassVar[O3DVisualizer.TickResult] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    DEPTH: ClassVar[O3DVisualizer.Shader] = ...
    NORMALS: ClassVar[O3DVisualizer.Shader] = ...
    STANDARD: ClassVar[O3DVisualizer.Shader] = ...
    UNLIT: ClassVar[O3DVisualizer.Shader] = ...
    animation_duration: float
    animation_frame_delay: float
    animation_time_step: float
    current_time: float
    ground_plane: open3d.visualization.rendering.Scene.GroundPlane
    is_animating: bool
    line_width: int
    mouse_mode: open3d.visualization.gui.SceneWidget.Controls
    os_frame: open3d.visualization.gui.Rect
    point_size: int
    scene_shader: O3DVisualizer.Shader
    show_axes: bool
    show_ground: bool
    show_settings: bool
    size: open3d.visualization.gui.Size
    title: str
    def __init__(
        self, title: str = ..., width: int = ..., height: int = ...
    ) -> None: ...
    def add_3d_label(
        self, arg0: npt.NDArray[Annotated[np.int32, "3,1"]], arg1: str
    ) -> None: ...
    @overload
    def add_action(self, arg0: str, arg1: Callable[[O3DVisualizer], None]) -> None: ...
    @overload
    def add_action(name, callback) -> Any: ...
    @overload
    def add_geometry(
        self,
        name: str,
        geometry: open3d.geometry.Geometry3D,
        material: open3d.visualization.rendering.MaterialRecord = ...,
        group: str = ...,
        time: float = ...,
        is_visible: bool = ...,
    ) -> None: ...
    @overload
    def add_geometry(
        name, geometry, material=..., group=..., time=..., is_visible=...
    ) -> Any: ...
    @overload
    def add_geometry(
        self,
        name: str,
        geometry: open3d.t.geometry.Geometry,
        material: open3d.visualization.rendering.MaterialRecord = ...,
        group: str = ...,
        time: float = ...,
        is_visible: bool = ...,
    ) -> None: ...
    @overload
    def add_geometry(
        self,
        name: str,
        model: open3d.visualization.rendering.TriangleMeshModel,
        material: open3d.visualization.rendering.MaterialRecord = ...,
        group: str = ...,
        time: float = ...,
        is_visible: bool = ...,
    ) -> None: ...
    @overload
    def add_geometry(
        name, model, material=..., group=..., time=..., is_visible=...
    ) -> Any: ...
    @overload
    def add_geometry(self, arg0: dict) -> None: ...
    def clear_3d_labels(self) -> None: ...
    def close(self) -> None: ...
    def close_dialog(self) -> None: ...
    @overload
    def enable_raw_mode(self, arg0: bool) -> None: ...
    @overload
    def enable_raw_mode(enable) -> Any: ...
    def export_current_image(self, arg0: str) -> None: ...
    @overload
    def get_geometry(self, arg0: str) -> O3DVisualizer.DrawObject: ...
    @overload
    def get_geometry(name) -> Any: ...
    @overload
    def get_geometry_material(
        self, arg0: str
    ) -> open3d.visualization.rendering.MaterialRecord: ...
    @overload
    def get_geometry_material(name) -> Any: ...
    def get_selection_sets(self) -> List[Dict[str, Set[SelectedIndex]]]: ...
    @overload
    def modify_geometry_material(
        self, arg0: str, arg1: open3d.visualization.rendering.MaterialRecord
    ) -> None: ...
    @overload
    def modify_geometry_material(name, material) -> Any: ...
    def post_redraw(self) -> None: ...
    @overload
    def remove_geometry(self, arg0: str) -> None: ...
    @overload
    def remove_geometry(name) -> Any: ...
    def reset_camera_to_default(self) -> None: ...
    @overload
    def set_background(
        self, arg0: npt.NDArray[Annotated[np.int32, "4,1"]], arg1: open3d.geometry.Image
    ) -> None: ...
    @overload
    def set_background(color, image=...) -> Any: ...
    @overload
    def set_ibl(self, arg0: str) -> None: ...
    @overload
    def set_ibl(ibl_name) -> Any: ...
    @overload
    def set_ibl_intensity(self, arg0: float) -> None: ...
    @overload
    def set_ibl_intensity(intensity) -> Any: ...
    def set_on_animation_frame(
        self, arg0: Callable[[O3DVisualizer, float], None]
    ) -> None: ...
    def set_on_animation_tick(
        self, arg0: Callable[[O3DVisualizer, float, float], O3DVisualizer.TickResult]
    ) -> None: ...
    def set_on_close(self, arg0: Callable[[], bool]) -> None: ...
    @overload
    def setup_camera(
        self,
        arg0: float,
        arg1: npt.NDArray[Annotated[np.int32, "3,1"]],
        arg2: npt.NDArray[Annotated[np.int32, "3,1"]],
        arg3: npt.NDArray[Annotated[np.int32, "3,1"]],
    ) -> None: ...
    @overload
    def setup_camera(field_of_view, center, eye, up) -> Any: ...
    @overload
    def setup_camera(
        self,
        arg0: open3d.camera.PinholeCameraIntrinsic,
        arg1: npt.NDArray[Annotated[np.float64, "4,4"]],
    ) -> None: ...
    @overload
    def setup_camera(intrinsic, extrinsic_matrix) -> Any: ...
    @overload
    def setup_camera(
        self,
        arg0: npt.NDArray[Annotated[np.float64, "3,3"]],
        arg1: npt.NDArray[Annotated[np.float64, "4,4"]],
        arg2: int,
        arg3: int,
    ) -> None: ...
    @overload
    def setup_camera(
        intrinsic_matrix, extrinsic_matrix, intrinsic_width_px, intrinsic_height_px
    ) -> Any: ...
    def show(self, arg0: bool) -> None: ...
    def show_dialog(self, arg0: open3d.visualization.gui.Dialog) -> None: ...
    @overload
    def show_geometry(self, arg0: str, arg1: bool) -> None: ...
    @overload
    def show_menu(self, arg0: bool) -> None: ...
    @overload
    def show_menu(show) -> Any: ...
    def show_message_box(self, arg0: str, arg1: str) -> None: ...
    def show_skybox(self, arg0: bool) -> None: ...
    def size_to_fit(self) -> None: ...
    def start_rpc_interface(self, address: str, timeout: int) -> None: ...
    def stop_rpc_interface(self) -> None: ...
    @overload
    def update_geometry(
        self, arg0: str, arg1: open3d.t.geometry.Geometry, arg2: int
    ) -> None: ...
    @overload
    def update_geometry(name, tpoint_cloud, update_flags) -> Any: ...
    @property
    def content_rect(self) -> open3d.visualization.gui.Rect: ...
    @property
    def is_visible(self) -> bool: ...
    @property
    def scaling(self) -> float: ...
    @property
    def scene(self) -> open3d.visualization.rendering.Open3DScene: ...
    @property
    def uid(self) -> str: ...

class PickedPoint:
    coord: npt.NDArray[Annotated[np.float64, "3,1"]]
    index: int
    def __init__(self) -> None: ...

class PointColorOption:
    __members__: ClassVar[dict] = ...  # read-only
    Color: ClassVar[PointColorOption] = ...
    Default: ClassVar[PointColorOption] = ...
    Normal: ClassVar[PointColorOption] = ...
    XCoordinate: ClassVar[PointColorOption] = ...
    YCoordinate: ClassVar[PointColorOption] = ...
    ZCoordinate: ClassVar[PointColorOption] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RenderOption:
    background_color: npt.NDArray[Annotated[np.float64, "3,1"]]
    light_on: bool
    line_width: float
    mesh_color_option: Any
    mesh_shade_option: Any
    mesh_show_back_face: bool
    mesh_show_wireframe: bool
    point_color_option: Any
    point_show_normal: bool
    point_size: float
    show_coordinate_frame: bool
    def __init__(self) -> None: ...
    def load_from_json(self, filename) -> Any: ...
    def save_to_json(self, filename) -> Any: ...

class ScalarProperties:
    def __init__(self) -> None: ...
    def items(self) -> Iterator: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, arg0: str) -> bool: ...
    def __delitem__(self, arg0: str) -> None: ...
    def __getitem__(self, arg0: str) -> float: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg0: str, arg1: float) -> None: ...

class SelectedIndex:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def index(self) -> int: ...
    @property
    def order(self) -> int: ...
    @property
    def point(self) -> npt.NDArray[Annotated[np.float64, "3,1"]]: ...

class SelectionPolygonVolume:
    axis_max: float
    axis_min: float
    bounding_polygon: open3d.utility.Vector3dVector
    orthogonal_axis: str
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: SelectionPolygonVolume) -> None: ...
    def crop_point_cloud(self, input) -> Any: ...
    def crop_triangle_mesh(self, input) -> Any: ...
    def __copy__(self) -> SelectionPolygonVolume: ...
    def __deepcopy__(self, arg0: dict) -> SelectionPolygonVolume: ...

class TextureMaps:
    def __init__(self) -> None: ...
    def items(self) -> Iterator: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, arg0: str) -> bool: ...
    def __delitem__(self, arg0: str) -> None: ...
    def __getitem__(self, arg0: str) -> open3d.t.geometry.Image: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg0: str, arg1: open3d.t.geometry.Image) -> None: ...

class VectorProperties:
    def __init__(self) -> None: ...
    def items(self) -> Iterator: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, arg0: str) -> bool: ...
    def __delitem__(self, arg0: str) -> None: ...
    def __getitem__(self, arg0: str) -> npt.NDArray[Annotated[np.int32, "4,1"]]: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __setitem__(
        self, arg0: str, arg1: npt.NDArray[Annotated[np.int32, "4,1"]]
    ) -> None: ...

class ViewControl:
    def __init__(self) -> None: ...
    def camera_local_rotate(
        self, x: float, y: float, xo: float = ..., yo: float = ...
    ) -> None: ...
    def camera_local_translate(
        self, forward: float, right: float, up: float
    ) -> None: ...
    def change_field_of_view(self, step=...) -> Any: ...
    def convert_from_pinhole_camera_parameters(
        self, parameter, allow_arbitrary=...
    ) -> Any: ...
    def convert_to_pinhole_camera_parameters(self) -> Any: ...
    def get_field_of_view(self) -> Any: ...
    def reset_camera_local_rotate(self) -> None: ...
    def rotate(self, x, y, xo=..., yo=...) -> Any: ...
    @overload
    def scale(self, scale) -> Any: ...
    @overload
    def scale(float) -> Any: ...
    def set_constant_z_far(self, z_far) -> Any: ...
    def set_constant_z_near(self, z_near) -> Any: ...
    def set_front(self, front: npt.NDArray[Annotated[np.float64, "3,1"]]) -> None: ...
    def set_lookat(self, lookat: npt.NDArray[Annotated[np.float64, "3,1"]]) -> None: ...
    def set_up(self, up: npt.NDArray[Annotated[np.float64, "3,1"]]) -> None: ...
    def set_zoom(self, zoom: float) -> None: ...
    def translate(self, x, y, xo=..., yo=...) -> Any: ...
    def unset_constant_z_far(self) -> Any: ...
    def unset_constant_z_near(self) -> Any: ...

class Visualizer:
    def __init__(self) -> None: ...
    def add_geometry(self, geometry, reset_bounding_box=...) -> Any: ...
    def capture_depth_float_buffer(self, do_render=...) -> Any: ...
    def capture_depth_image(self, filename, do_render=..., depth_scale=...) -> Any: ...
    def capture_depth_point_cloud(
        self, filename, do_render=..., convert_to_world_coordinate=...
    ) -> Any: ...
    def capture_screen_float_buffer(self, do_render=...) -> Any: ...
    def capture_screen_image(self, filename, do_render=...) -> Any: ...
    def clear_geometries(self) -> bool: ...
    def close(self) -> Any: ...
    def create_window(
        self, window_name=..., width=..., height=..., left=..., top=..., visible=...
    ) -> Any: ...
    def destroy_window(self) -> Any: ...
    def get_render_option(self) -> Any: ...
    def get_view_control(self) -> Any: ...
    def get_window_name(self) -> Any: ...
    def is_full_screen(self) -> Any: ...
    def poll_events(self) -> Any: ...
    def register_animation_callback(self, callback_func) -> Any: ...
    def remove_geometry(self, geometry, reset_bounding_box=...) -> Any: ...
    def reset_view_point(self, arg0) -> Any: ...
    def run(self) -> Any: ...
    def set_full_screen(self, arg0) -> Any: ...
    def toggle_full_screen(self) -> Any: ...
    def update_geometry(self, geometry) -> Any: ...
    def update_renderer(self) -> Any: ...

class VisualizerWithEditing(Visualizer):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: bool, arg2: str) -> None: ...
    def get_cropped_geometry(self) -> open3d.geometry.Geometry: ...
    def get_picked_points(self) -> List[int]: ...

class VisualizerWithKeyCallback(Visualizer):
    def __init__(self) -> None: ...
    def register_key_action_callback(
        self, key: int, callback_func: Callable[[Visualizer, int, int], bool]
    ) -> None: ...
    def register_key_callback(
        self, key: int, callback_func: Callable[[Visualizer], bool]
    ) -> None: ...

class VisualizerWithVertexSelection(Visualizer):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def add_picked_points(self, arg0: open3d.utility.IntVector) -> None: ...
    def clear_picked_points(self) -> None: ...
    def get_picked_points(self, *args, **kwargs) -> Any: ...
    def pick_points(
        self, arg0: float, arg1: float, arg2: float, arg3: float
    ) -> open3d.utility.IntVector: ...
    def register_selection_changed_callback(self, arg0: Callable[[], None]) -> None: ...
    def register_selection_moved_callback(self, arg0: Callable[[], None]) -> None: ...
    def register_selection_moving_callback(self, arg0: Callable[[], None]) -> None: ...
    def remove_picked_points(self, arg0: open3d.utility.IntVector) -> None: ...

@overload
def draw_geometries(
    geometry_list,
    window_name=...,
    width=...,
    height=...,
    left=...,
    top=...,
    point_show_normal=...,
    mesh_show_wireframe=...,
    mesh_show_back_face=...,
) -> Any: ...
@overload
def draw_geometries(
    geometry_list,
    window_name=...,
    width=...,
    height=...,
    left=...,
    top=...,
    point_show_normal=...,
    mesh_show_wireframe=...,
    mesh_show_back_face=...,
    lookat=...,
    up=...,
    front=...,
    zoom=...,
) -> Any: ...
def draw_geometries_with_animation_callback(
    geometry_list,
    callback_function,
    window_name=...,
    width=...,
    height=...,
    left=...,
    top=...,
) -> Any: ...
def draw_geometries_with_custom_animation(
    geometry_list,
    window_name=...,
    width=...,
    height=...,
    left=...,
    top=...,
    optional_view_trajectory_json_file=...,
) -> Any: ...
def draw_geometries_with_editing(
    geometry_list, window_name=..., width=..., height=..., left=..., top=...
) -> Any: ...
def draw_geometries_with_key_callbacks(
    geometry_list,
    key_to_callback,
    window_name=...,
    width=...,
    height=...,
    left=...,
    top=...,
) -> Any: ...
def draw_geometries_with_vertex_selection(
    geometry_list, window_name=..., width=..., height=..., left=..., top=...
) -> Any: ...
def read_selection_polygon_volume(filename) -> Any: ...

__all__ = [
    "app",
    "gui",
    "rendering",
    "webrtc_server",
    "Color",
    "Default",
    "Normal",
    "XCoordinate",
    "YCoordinate",
    "ZCoordinate",
    "Material",
    "MeshColorOption",
    "MeshShadeOption",
    "O3DVisualizer",
    "PickedPoint",
    "PointColorOption",
    "RenderOption",
    "ScalarProperties",
    "SelectedIndex",
    "SelectionPolygonVolume",
    "TextureMaps",
    "VectorProperties",
    "ViewControl",
    "Visualizer",
    "VisualizerWithEditing",
    "VisualizerWithKeyCallback",
    "VisualizerWithVertexSelection",
    "draw_geometries",
    "draw_geometries",
    "draw_geometries_with_animation_callback",
    "draw_geometries_with_custom_animation",
    "draw_geometries_with_editing",
    "draw_geometries_with_key_callbacks",
    "draw_geometries_with_vertex_selection",
    "read_selection_polygon_volume",
]
