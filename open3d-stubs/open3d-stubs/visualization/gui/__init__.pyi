from typing import Any, Callable, ClassVar, List, Set, overload

import numpy as np
import numpy.typing as npt
import open3d.camera
import open3d.geometry
import open3d.t.geometry
import open3d.visualization.rendering
from typing_extensions import Annotated

A: KeyName
ALT: KeyName
AMPERSAND: KeyName
ASTERISK: KeyName
AT: KeyName
B: KeyName
BACKSLASH: KeyName
BACKSPACE: KeyName
BACKTICK: KeyName
BUTTON4: MouseButton
BUTTON5: MouseButton
C: KeyName
CAPS_LOCK: KeyName
CARET: KeyName
COLON: KeyName
COMMA: KeyName
CTRL: KeyModifier
D: KeyName
DELETE: KeyName
DOLLAR_SIGN: KeyName
DOUBLE_QUOTE: KeyName
DOWN: KeyName
E: KeyName
EIGHT: KeyName
END: KeyName
ENTER: KeyName
EQUALS: KeyName
ESCAPE: KeyName
EXCLAMATION_MARK: KeyName
F: KeyName
F1: KeyName
F10: KeyName
F11: KeyName
F12: KeyName
F2: KeyName
F3: KeyName
F4: KeyName
F5: KeyName
F6: KeyName
F7: KeyName
F8: KeyName
F9: KeyName
FIVE: KeyName
FOUR: KeyName
G: KeyName
GREATER_THAN: KeyName
H: KeyName
HASH: KeyName
HOME: KeyName
I: KeyName
INSERT: KeyName
J: KeyName
K: KeyName
L: KeyName
LEFT: KeyName
LEFT_BRACE: KeyName
LEFT_BRACKET: KeyName
LEFT_CONTROL: KeyName
LEFT_PAREN: KeyName
LEFT_SHIFT: KeyName
LESS_THAN: KeyName
M: KeyName
META: KeyName
MIDDLE: MouseButton
MINUS: KeyName
N: KeyName
NINE: KeyName
NONE: KeyName
O: KeyName
ONE: KeyName
P: KeyName
PAGE_DOWN: KeyName
PAGE_UP: KeyName
PERCENT: KeyName
PERIOD: KeyName
PIPE: KeyName
PLUS: KeyName
Q: KeyName
QUESTION_MARK: KeyName
QUOTE: KeyName
R: KeyName
RIGHT: KeyName
RIGHT_BRACE: KeyName
RIGHT_BRACKET: KeyName
RIGHT_CONTROL: KeyName
RIGHT_PAREN: KeyName
RIGHT_SHIFT: KeyName
S: KeyName
SEMICOLON: KeyName
SEVEN: KeyName
SHIFT: KeyModifier
SIX: KeyName
SLASH: KeyName
SPACE: KeyName
T: KeyName
TAB: KeyName
THREE: KeyName
TILDE: KeyName
TWO: KeyName
U: KeyName
UNDERSCORE: KeyName
UNKNOWN: KeyName
UP: KeyName
V: KeyName
W: KeyName
X: KeyName
Y: KeyName
Z: KeyName
ZERO: KeyName

class Application:
    instance: ClassVar[Application] = ...  # read-only
    DEFAULT_FONT_ID: ClassVar[int] = ...
    menubar: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def add_font(self, arg0: FontDescription) -> int: ...
    def add_window(self, arg0) -> None: ...
    def create_window(self, title, width, height, x, y, flags) -> Any: ...
    @overload
    def initialize(self) -> None: ...
    @overload
    def initialize(self, arg0: str) -> None: ...
    def post_to_main_thread(self, arg0, arg1: Callable[[], None]) -> None: ...
    def quit(self) -> None: ...
    def render_to_image(
        self, arg0: open3d.visualization.rendering.Open3DScene, arg1: int, arg2: int
    ) -> open3d.geometry.Image: ...
    @overload
    def run(self) -> None: ...
    def run_in_thread(self, arg0: Callable[[], None]) -> None: ...
    def run_one_tick(self) -> bool: ...
    def set_font(self, arg0: int, arg1: FontDescription) -> None: ...
    @property
    def now(self) -> float: ...
    @property
    def resource_path(self) -> str: ...

class Button(Widget):
    horizontal_padding_em: float
    is_on: bool
    text: str
    toggleable: bool
    vertical_padding_em: float
    def __init__(self, arg0: str) -> None: ...
    def set_on_clicked(self, arg0: Callable[[], None]) -> None: ...

class CheckableTextTreeCell(Widget):
    def __init__(self, arg0: str, arg1: bool, arg2: Callable[[bool], None]) -> None: ...
    @property
    def checkbox(self) -> Checkbox: ...
    @property
    def label(self) -> Label: ...

class Checkbox(Widget):
    checked: bool
    def __init__(self, arg0: str) -> None: ...
    def set_on_checked(self, arg0: Callable[[bool], None]) -> None: ...

class CollapsableVert(Vert):
    font_id: int
    @overload
    def __init__(
        self, text: str, spacing: int = ..., margins: Margins = ...
    ) -> None: ...
    @overload
    def __init__(
        self, text: str, spacing: float = ..., margins: Margins = ...
    ) -> None: ...
    def get_is_open(self) -> bool: ...
    def set_is_open(self, is_open: bool) -> None: ...

class Color:
    def __init__(
        self, r: float = ..., g: float = ..., b: float = ..., a: float = ...
    ) -> None: ...
    def set_color(self, r: float, g: float, b: float, a: float = ...) -> None: ...
    @property
    def alpha(self) -> float: ...
    @property
    def blue(self) -> float: ...
    @property
    def green(self) -> float: ...
    @property
    def red(self) -> float: ...

class ColorEdit(Widget):
    color_value: Color
    def __init__(self) -> None: ...
    def set_on_value_changed(self, arg0: Callable[[Color], None]) -> None: ...

class ColormapTreeCell(Widget):
    def __init__(
        self,
        arg0: float,
        arg1: Color,
        arg2: Callable[[float], None],
        arg3: Callable[[Color], None],
    ) -> None: ...
    @property
    def color_edit(self) -> ColorEdit: ...
    @property
    def number_edit(self) -> NumberEdit: ...

class Combobox(Widget):
    selected_index: int
    selected_text: str
    def __init__(self) -> None: ...
    def add_item(self, arg0: str) -> int: ...
    @overload
    def change_item(self, arg0: int, arg1: str) -> None: ...
    @overload
    def change_item(index, newtext) -> Any: ...
    @overload
    def change_item(self, arg0: str, arg1: str) -> None: ...
    @overload
    def change_item(text, newtext) -> Any: ...
    def clear_items(self) -> None: ...
    def get_item(self, arg0: int) -> str: ...
    @overload
    def remove_item(self, arg0: str) -> None: ...
    @overload
    def remove_item(self, arg0: int) -> None: ...
    def set_on_selection_changed(self, arg0: Callable[[str, int], None]) -> None: ...
    @property
    def number_of_items(self) -> int: ...

class Dialog(Widget):
    def __init__(self, arg0: str) -> None: ...

class FileDialog(Dialog):
    class Mode:
        __members__: ClassVar[dict] = ...  # read-only
        OPEN: ClassVar[FileDialog.Mode] = ...
        OPEN_DIR: ClassVar[FileDialog.Mode] = ...
        SAVE: ClassVar[FileDialog.Mode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    OPEN: ClassVar[FileDialog.Mode] = ...
    OPEN_DIR: ClassVar[FileDialog.Mode] = ...
    SAVE: ClassVar[FileDialog.Mode] = ...
    def __init__(self, arg0: FileDialog.Mode, arg1: str, arg2: Theme) -> None: ...
    def add_filter(self, arg0: str, arg1: str) -> None: ...
    def set_on_cancel(self, arg0: Callable[[], None]) -> None: ...
    def set_on_done(self, arg0: Callable[[str], None]) -> None: ...
    def set_path(self, arg0: str) -> None: ...

class FontDescription:
    MONOSPACE: ClassVar[str] = ...
    SANS_SERIF: ClassVar[str] = ...
    def __init__(
        self, typeface: str = ..., style: FontStyle = ..., point_size: int = ...
    ) -> None: ...
    def add_typeface_for_code_points(self, arg0: str, arg1: List[int]) -> None: ...
    def add_typeface_for_language(self, arg0: str, arg1: str) -> None: ...

class FontStyle:
    __members__: ClassVar[dict] = ...  # read-only
    BOLD: ClassVar[FontStyle] = ...
    BOLD_ITALIC: ClassVar[FontStyle] = ...
    ITALIC: ClassVar[FontStyle] = ...
    NORMAL: ClassVar[FontStyle] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Horiz(Layout1D):
    preferred_height: int
    @overload
    def __init__(self, spacing: int = ..., margins: Margins = ...) -> None: ...
    @overload
    def __init__(self, spacing: float = ..., margins: Margins = ...) -> None: ...

class ImageWidget(Widget):
    ui_image: UIImage
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: open3d.geometry.Image) -> None: ...
    @overload
    def __init__(self, arg0: open3d.t.geometry.Image) -> None: ...
    @overload
    def update_image(self, arg0: open3d.geometry.Image) -> None: ...
    @overload
    def update_image(self, arg0: open3d.t.geometry.Image) -> None: ...

class KeyEvent:
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        DOWN: ClassVar[KeyEvent.Type] = ...
        UP: ClassVar[KeyEvent.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __and__(self, other: object) -> object: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> object: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: object) -> object: ...
        def __rand__(self, other: object) -> object: ...
        def __ror__(self, other: object) -> object: ...
        def __rxor__(self, other: object) -> object: ...
        def __setstate__(self, state: int) -> None: ...
        def __xor__(self, other: object) -> object: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    DOWN: ClassVar[KeyEvent.Type] = ...
    UP: ClassVar[KeyEvent.Type] = ...
    is_repeat: bool
    key: int
    type: KeyEvent.Type
    def __init__(self, *args, **kwargs) -> None: ...

class KeyModifier:
    __members__: ClassVar[dict] = ...  # read-only
    ALT: ClassVar[KeyModifier] = ...
    CTRL: ClassVar[KeyModifier] = ...
    META: ClassVar[KeyModifier] = ...
    NONE: ClassVar[KeyModifier] = ...
    SHIFT: ClassVar[KeyModifier] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class KeyName:
    __members__: ClassVar[dict] = ...  # read-only
    A: ClassVar[KeyName] = ...
    ALT: ClassVar[KeyName] = ...
    AMPERSAND: ClassVar[KeyName] = ...
    ASTERISK: ClassVar[KeyName] = ...
    AT: ClassVar[KeyName] = ...
    B: ClassVar[KeyName] = ...
    BACKSLASH: ClassVar[KeyName] = ...
    BACKSPACE: ClassVar[KeyName] = ...
    BACKTICK: ClassVar[KeyName] = ...
    C: ClassVar[KeyName] = ...
    CAPS_LOCK: ClassVar[KeyName] = ...
    CARET: ClassVar[KeyName] = ...
    COLON: ClassVar[KeyName] = ...
    COMMA: ClassVar[KeyName] = ...
    D: ClassVar[KeyName] = ...
    DELETE: ClassVar[KeyName] = ...
    DOLLAR_SIGN: ClassVar[KeyName] = ...
    DOUBLE_QUOTE: ClassVar[KeyName] = ...
    DOWN: ClassVar[KeyName] = ...
    E: ClassVar[KeyName] = ...
    EIGHT: ClassVar[KeyName] = ...
    END: ClassVar[KeyName] = ...
    ENTER: ClassVar[KeyName] = ...
    EQUALS: ClassVar[KeyName] = ...
    ESCAPE: ClassVar[KeyName] = ...
    EXCLAMATION_MARK: ClassVar[KeyName] = ...
    F: ClassVar[KeyName] = ...
    F1: ClassVar[KeyName] = ...
    F10: ClassVar[KeyName] = ...
    F11: ClassVar[KeyName] = ...
    F12: ClassVar[KeyName] = ...
    F2: ClassVar[KeyName] = ...
    F3: ClassVar[KeyName] = ...
    F4: ClassVar[KeyName] = ...
    F5: ClassVar[KeyName] = ...
    F6: ClassVar[KeyName] = ...
    F7: ClassVar[KeyName] = ...
    F8: ClassVar[KeyName] = ...
    F9: ClassVar[KeyName] = ...
    FIVE: ClassVar[KeyName] = ...
    FOUR: ClassVar[KeyName] = ...
    G: ClassVar[KeyName] = ...
    GREATER_THAN: ClassVar[KeyName] = ...
    H: ClassVar[KeyName] = ...
    HASH: ClassVar[KeyName] = ...
    HOME: ClassVar[KeyName] = ...
    I: ClassVar[KeyName] = ...
    INSERT: ClassVar[KeyName] = ...
    J: ClassVar[KeyName] = ...
    K: ClassVar[KeyName] = ...
    L: ClassVar[KeyName] = ...
    LEFT: ClassVar[KeyName] = ...
    LEFT_BRACE: ClassVar[KeyName] = ...
    LEFT_BRACKET: ClassVar[KeyName] = ...
    LEFT_CONTROL: ClassVar[KeyName] = ...
    LEFT_PAREN: ClassVar[KeyName] = ...
    LEFT_SHIFT: ClassVar[KeyName] = ...
    LESS_THAN: ClassVar[KeyName] = ...
    M: ClassVar[KeyName] = ...
    META: ClassVar[KeyName] = ...
    MINUS: ClassVar[KeyName] = ...
    N: ClassVar[KeyName] = ...
    NINE: ClassVar[KeyName] = ...
    NONE: ClassVar[KeyName] = ...
    O: ClassVar[KeyName] = ...
    ONE: ClassVar[KeyName] = ...
    P: ClassVar[KeyName] = ...
    PAGE_DOWN: ClassVar[KeyName] = ...
    PAGE_UP: ClassVar[KeyName] = ...
    PERCENT: ClassVar[KeyName] = ...
    PERIOD: ClassVar[KeyName] = ...
    PIPE: ClassVar[KeyName] = ...
    PLUS: ClassVar[KeyName] = ...
    Q: ClassVar[KeyName] = ...
    QUESTION_MARK: ClassVar[KeyName] = ...
    QUOTE: ClassVar[KeyName] = ...
    R: ClassVar[KeyName] = ...
    RIGHT: ClassVar[KeyName] = ...
    RIGHT_BRACE: ClassVar[KeyName] = ...
    RIGHT_BRACKET: ClassVar[KeyName] = ...
    RIGHT_CONTROL: ClassVar[KeyName] = ...
    RIGHT_PAREN: ClassVar[KeyName] = ...
    RIGHT_SHIFT: ClassVar[KeyName] = ...
    S: ClassVar[KeyName] = ...
    SEMICOLON: ClassVar[KeyName] = ...
    SEVEN: ClassVar[KeyName] = ...
    SIX: ClassVar[KeyName] = ...
    SLASH: ClassVar[KeyName] = ...
    SPACE: ClassVar[KeyName] = ...
    T: ClassVar[KeyName] = ...
    TAB: ClassVar[KeyName] = ...
    THREE: ClassVar[KeyName] = ...
    TILDE: ClassVar[KeyName] = ...
    TWO: ClassVar[KeyName] = ...
    U: ClassVar[KeyName] = ...
    UNDERSCORE: ClassVar[KeyName] = ...
    UNKNOWN: ClassVar[KeyName] = ...
    UP: ClassVar[KeyName] = ...
    V: ClassVar[KeyName] = ...
    W: ClassVar[KeyName] = ...
    X: ClassVar[KeyName] = ...
    Y: ClassVar[KeyName] = ...
    Z: ClassVar[KeyName] = ...
    ZERO: ClassVar[KeyName] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class LUTTreeCell(Widget):
    def __init__(
        self,
        arg0: str,
        arg1: bool,
        arg2: Color,
        arg3: Callable[[bool], None],
        arg4: Callable[[Color], None],
    ) -> None: ...
    @property
    def checkbox(self) -> Checkbox: ...
    @property
    def color_edit(self) -> ColorEdit: ...
    @property
    def label(self) -> Label: ...

class Label(Widget):
    font_id: int
    text: str
    text_color: Color
    def __init__(self, arg0: str) -> None: ...

class Label3D:
    color: Color
    position: npt.NDArray[Annotated[np.int32, "3,1"]]
    scale: float
    text: str
    def __init__(
        self, arg0: str, arg1: npt.NDArray[Annotated[np.int32, "3,1"]]
    ) -> None: ...

class Layout1D(Widget):
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def add_fixed(self, arg0: int) -> None: ...
    @overload
    def add_fixed(self, arg0: float) -> None: ...
    def add_stretch(self) -> None: ...

class LayoutContext:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def theme(self) -> Any: ...

class ListView(Widget):
    selected_index: int
    def __init__(self) -> None: ...
    def set_items(self, arg0: List[str]) -> None: ...
    def set_max_visible_items(self, arg0: int) -> None: ...
    def set_on_selection_changed(self, arg0: Callable[[str, bool], None]) -> None: ...
    @property
    def selected_value(self) -> str: ...

class Margins:
    bottom: int
    left: int
    right: int
    top: int
    @overload
    def __init__(
        self, left: int = ..., top: int = ..., right: int = ..., bottom: int = ...
    ) -> None: ...
    @overload
    def __init__(
        self,
        left: float = ...,
        top: float = ...,
        right: float = ...,
        bottom: float = ...,
    ) -> None: ...
    def get_horiz(self) -> int: ...
    def get_vert(self) -> int: ...

class Menu:
    def __init__(self) -> None: ...
    def add_item(self, arg0: str, arg1: int) -> None: ...
    def add_menu(self, arg0: str, arg1: Menu) -> None: ...
    def add_separator(self) -> None: ...
    def is_checked(self, arg0: int) -> bool: ...
    def set_checked(self, arg0: int, arg1: bool) -> None: ...
    def set_enabled(self, arg0: int, arg1: bool) -> None: ...

class MouseButton:
    __members__: ClassVar[dict] = ...  # read-only
    BUTTON4: ClassVar[MouseButton] = ...
    BUTTON5: ClassVar[MouseButton] = ...
    LEFT: ClassVar[MouseButton] = ...
    MIDDLE: ClassVar[MouseButton] = ...
    NONE: ClassVar[MouseButton] = ...
    RIGHT: ClassVar[MouseButton] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class MouseEvent:
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        BUTTON_DOWN: ClassVar[MouseEvent.Type] = ...
        BUTTON_UP: ClassVar[MouseEvent.Type] = ...
        DRAG: ClassVar[MouseEvent.Type] = ...
        MOVE: ClassVar[MouseEvent.Type] = ...
        WHEEL: ClassVar[MouseEvent.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __and__(self, other: object) -> object: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> object: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: object) -> object: ...
        def __rand__(self, other: object) -> object: ...
        def __ror__(self, other: object) -> object: ...
        def __rxor__(self, other: object) -> object: ...
        def __setstate__(self, state: int) -> None: ...
        def __xor__(self, other: object) -> object: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    BUTTON_DOWN: ClassVar[MouseEvent.Type] = ...
    BUTTON_UP: ClassVar[MouseEvent.Type] = ...
    DRAG: ClassVar[MouseEvent.Type] = ...
    MOVE: ClassVar[MouseEvent.Type] = ...
    WHEEL: ClassVar[MouseEvent.Type] = ...
    buttons: int
    modifiers: int
    type: MouseEvent.Type
    wheel_dx: int
    wheel_dy: int
    wheel_is_trackpad: bool
    x: int
    y: int
    def __init__(self, *args, **kwargs) -> None: ...
    def is_button_down(self, arg0: MouseButton) -> bool: ...
    def is_modifier_down(self, arg0: KeyModifier) -> bool: ...

class NumberEdit(Widget):
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        DOUBLE: ClassVar[NumberEdit.Type] = ...
        INT: ClassVar[NumberEdit.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __and__(self, other: object) -> object: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> object: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: object) -> object: ...
        def __rand__(self, other: object) -> object: ...
        def __ror__(self, other: object) -> object: ...
        def __rxor__(self, other: object) -> object: ...
        def __setstate__(self, state: int) -> None: ...
        def __xor__(self, other: object) -> object: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    DOUBLE: ClassVar[NumberEdit.Type] = ...
    INT: ClassVar[NumberEdit.Type] = ...
    decimal_precision: int
    double_value: float
    int_value: int
    def __init__(self, arg0: NumberEdit.Type) -> None: ...
    def set_limits(self, arg0: float, arg1: float) -> None: ...
    def set_on_value_changed(self, arg0: Callable[[float], None]) -> None: ...
    @overload
    def set_preferred_width(self, arg0: int) -> None: ...
    @overload
    def set_preferred_width(self, arg0: float) -> None: ...
    def set_value(self, arg0: float) -> None: ...
    @property
    def maximum_value(self) -> float: ...
    @property
    def minimum_value(self) -> float: ...

class ProgressBar(Widget):
    value: float
    def __init__(self) -> None: ...

class RadioButton(Widget):
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        HORIZ: ClassVar[RadioButton.Type] = ...
        VERT: ClassVar[RadioButton.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __and__(self, other: object) -> object: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> object: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: object) -> object: ...
        def __rand__(self, other: object) -> object: ...
        def __ror__(self, other: object) -> object: ...
        def __rxor__(self, other: object) -> object: ...
        def __setstate__(self, state: int) -> None: ...
        def __xor__(self, other: object) -> object: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    HORIZ: ClassVar[RadioButton.Type] = ...
    VERT: ClassVar[RadioButton.Type] = ...
    selected_index: int
    def __init__(self, arg0: RadioButton.Type) -> None: ...
    def set_items(self, arg0: List[str]) -> None: ...
    def set_on_selection_changed(self, arg0: Callable[[int], None]) -> None: ...
    @property
    def selected_value(self) -> str: ...

class Rect:
    height: int
    width: int
    x: int
    y: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def get_bottom(self) -> int: ...
    def get_left(self) -> int: ...
    def get_right(self) -> int: ...
    def get_top(self) -> int: ...

class SceneWidget(Widget):
    class Controls:
        __members__: ClassVar[dict] = ...  # read-only
        FLY: ClassVar[SceneWidget.Controls] = ...
        PICK_POINTS: ClassVar[SceneWidget.Controls] = ...
        ROTATE_CAMERA: ClassVar[SceneWidget.Controls] = ...
        ROTATE_CAMERA_SPHERE: ClassVar[SceneWidget.Controls] = ...
        ROTATE_IBL: ClassVar[SceneWidget.Controls] = ...
        ROTATE_MODEL: ClassVar[SceneWidget.Controls] = ...
        ROTATE_SUN: ClassVar[SceneWidget.Controls] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __and__(self, other: object) -> object: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> object: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: object) -> object: ...
        def __rand__(self, other: object) -> object: ...
        def __ror__(self, other: object) -> object: ...
        def __rxor__(self, other: object) -> object: ...
        def __setstate__(self, state: int) -> None: ...
        def __xor__(self, other: object) -> object: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    FLY: ClassVar[SceneWidget.Controls] = ...
    PICK_POINTS: ClassVar[SceneWidget.Controls] = ...
    ROTATE_CAMERA: ClassVar[SceneWidget.Controls] = ...
    ROTATE_CAMERA_SPHERE: ClassVar[SceneWidget.Controls] = ...
    ROTATE_IBL: ClassVar[SceneWidget.Controls] = ...
    ROTATE_MODEL: ClassVar[SceneWidget.Controls] = ...
    ROTATE_SUN: ClassVar[SceneWidget.Controls] = ...
    center_of_rotation: npt.NDArray[Annotated[np.int32, "3,1"]]
    scene: open3d.visualization.rendering.Open3DScene
    def __init__(self) -> None: ...
    def add_3d_label(
        self, arg0: npt.NDArray[Annotated[np.int32, "3,1"]], arg1: str
    ) -> Label3D: ...
    def enable_scene_caching(self, arg0: bool) -> None: ...
    def force_redraw(self) -> None: ...
    @overload
    def look_at(
        self,
        arg0: npt.NDArray[Annotated[np.int32, "3,1"]],
        arg1: npt.NDArray[Annotated[np.int32, "3,1"]],
        arg2: npt.NDArray[Annotated[np.int32, "3,1"]],
    ) -> None: ...
    @overload
    def look_at(center, eye, up) -> Any: ...
    def remove_3d_label(self, arg0: Label3D) -> None: ...
    def set_on_key(self, arg0: Callable[[KeyEvent], int]) -> None: ...
    def set_on_mouse(self, arg0: Callable[[MouseEvent], int]) -> None: ...
    def set_on_sun_direction_changed(
        self, arg0: Callable[[npt.NDArray[Annotated[np.int32, "3,1"]]], None]
    ) -> None: ...
    def set_view_controls(self, arg0: SceneWidget.Controls) -> None: ...
    @overload
    def setup_camera(
        self,
        arg0: float,
        arg1: open3d.geometry.AxisAlignedBoundingBox,
        arg2: npt.NDArray[Annotated[np.int32, "3,1"]],
    ) -> None: ...
    @overload
    def setup_camera(field_of_view, model_bounds, center_of_rotation) -> Any: ...
    @overload
    def setup_camera(
        self,
        arg0: open3d.camera.PinholeCameraIntrinsic,
        arg1: npt.NDArray[Annotated[np.float64, "4,4"]],
        arg2: open3d.geometry.AxisAlignedBoundingBox,
    ) -> None: ...
    @overload
    def setup_camera(intrinsics, extrinsic_matrix, model_bounds) -> Any: ...
    @overload
    def setup_camera(
        self,
        arg0: npt.NDArray[Annotated[np.float64, "3,3"]],
        arg1: npt.NDArray[Annotated[np.float64, "4,4"]],
        arg2: int,
        arg3: int,
        arg4: open3d.geometry.AxisAlignedBoundingBox,
    ) -> None: ...
    @overload
    def setup_camera(
        intrinsic_matrix,
        extrinsic_matrix,
        intrinsic_width_px,
        intrinsic_height_px,
        model_bounds,
    ) -> Any: ...

class ScrollableVert(Vert):
    @overload
    def __init__(self, spacing: int = ..., margins: Margins = ...) -> None: ...
    @overload
    def __init__(self, spacing: float = ..., margins: Margins = ...) -> None: ...

class Size:
    height: int
    width: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float) -> None: ...

class Slider(Widget):
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        DOUBLE: ClassVar[Slider.Type] = ...
        INT: ClassVar[Slider.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __and__(self, other: object) -> object: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> object: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: object) -> object: ...
        def __rand__(self, other: object) -> object: ...
        def __ror__(self, other: object) -> object: ...
        def __rxor__(self, other: object) -> object: ...
        def __setstate__(self, state: int) -> None: ...
        def __xor__(self, other: object) -> object: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    DOUBLE: ClassVar[Slider.Type] = ...
    INT: ClassVar[Slider.Type] = ...
    double_value: float
    int_value: int
    def __init__(self, arg0: Slider.Type) -> None: ...
    def set_limits(self, arg0: float, arg1: float) -> None: ...
    def set_on_value_changed(self, arg0: Callable[[float], None]) -> None: ...
    @property
    def get_maximum_value(self) -> float: ...
    @property
    def get_minimum_value(self) -> float: ...

class StackedWidget(Widget):
    selected_index: int
    def __init__(self) -> None: ...

class TabControl(Widget):
    selected_tab_index: int
    def __init__(self) -> None: ...
    def add_tab(self, arg0: str, arg1: Widget) -> None: ...
    def set_on_selected_tab_changed(self, arg0: Callable[[int], None]) -> None: ...

class TextEdit(Widget):
    placeholder_text: str
    text_value: str
    def __init__(self) -> None: ...
    def set_on_text_changed(self, arg0: Callable[[str], None]) -> None: ...
    def set_on_value_changed(self, arg0: Callable[[str], None]) -> None: ...

class Theme:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def default_layout_spacing(self) -> int: ...
    @property
    def default_margin(self) -> int: ...
    @property
    def font_size(self) -> int: ...

class ToggleSwitch(Widget):
    is_on: bool
    def __init__(self, arg0: str) -> None: ...
    def set_on_clicked(self, arg0: Callable[[bool], None]) -> None: ...

class TreeView(Widget):
    can_select_items_with_children: bool
    selected_item: int
    def __init__(self) -> None: ...
    @overload
    def add_item(self, arg0: int, arg1: Widget) -> int: ...
    @overload
    def add_item(parent, widget) -> Any: ...
    @overload
    def add_text_item(self, arg0: int, arg1: str) -> int: ...
    @overload
    def add_text_item(parent, text) -> Any: ...
    def clear(self) -> None: ...
    def get_root_item(self) -> int: ...
    def remove_item(self, arg0: int) -> None: ...
    def set_on_selection_changed(self, arg0: Callable[[int], None]) -> None: ...

class UIImage:
    class Scaling:
        __members__: ClassVar[dict] = ...  # read-only
        ANY: ClassVar[UIImage.Scaling] = ...
        ASPECT: ClassVar[UIImage.Scaling] = ...
        NONE: ClassVar[UIImage.Scaling] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    scaling: UIImage.Scaling
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: open3d.geometry.Image) -> None: ...

class VGrid(Widget):
    preferred_width: int
    @overload
    def __init__(
        self, cols: int, spacing: int = ..., margins: Margins = ...
    ) -> None: ...
    @overload
    def __init__(
        self, cols: int, spacing: float = ..., margins: Margins = ...
    ) -> None: ...
    @property
    def margins(self) -> Margins: ...
    @property
    def spacing(self) -> int: ...

class VectorEdit(Widget):
    vector_value: npt.NDArray[Annotated[np.int32, "3,1"]]
    def __init__(self) -> None: ...
    def set_on_value_changed(
        self, arg0: Callable[[npt.NDArray[Annotated[np.int32, "3,1"]]], None]
    ) -> None: ...

class Vert(Layout1D):
    preferred_width: int
    @overload
    def __init__(self, spacing: int = ..., margins: Margins = ...) -> None: ...
    @overload
    def __init__(self, spacing: float = ..., margins: Margins = ...) -> None: ...

class Widget:
    class Constraints:
        height: int
        width: int
        def __init__(self) -> None: ...

    class EventCallbackResult:
        __members__: ClassVar[dict] = ...  # read-only
        CONSUMED: ClassVar[Widget.EventCallbackResult] = ...
        HANDLED: ClassVar[Widget.EventCallbackResult] = ...
        IGNORED: ClassVar[Widget.EventCallbackResult] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    CONSUMED: ClassVar[Widget.EventCallbackResult] = ...
    HANDLED: ClassVar[Widget.EventCallbackResult] = ...
    IGNORED: ClassVar[Widget.EventCallbackResult] = ...
    background_color: Color
    enabled: bool
    frame: Rect
    tooltip: str
    visible: bool
    def __init__(self) -> None: ...
    def add_child(self, arg0: Widget) -> None: ...
    def calc_preferred_size(
        self, arg0: LayoutContext, arg1: Widget.Constraints
    ) -> Size: ...
    def get_children(self) -> List[Widget]: ...

class WidgetProxy(Widget):
    def __init__(self) -> None: ...
    def get_widget(self) -> Widget: ...
    def set_widget(self, arg0: Widget) -> None: ...

class WidgetStack(WidgetProxy):
    def __init__(self) -> None: ...
    def pop_widget(self) -> Widget: ...
    def push_widget(self, arg0: Widget) -> None: ...
    def set_on_top(self, arg0: Callable[[Widget], None]) -> None: ...

class Window(WindowBase):
    os_frame: Any
    size: Any
    title: str
    def __init__(self, *args, **kwargs) -> None: ...
    def add_child(self, arg0) -> None: ...
    def close(self) -> None: ...
    def close_dialog(self) -> None: ...
    def post_redraw(self) -> None: ...
    def set_focus_widget(self, arg0) -> None: ...
    def set_needs_layout(self) -> None: ...
    def set_on_close(self, arg0: Callable[[], bool]) -> None: ...
    def set_on_key(self, arg0: Callable[[KeyEvent], bool]) -> None: ...
    def set_on_layout(self, arg0: Callable[[LayoutContext], None]) -> None: ...
    def set_on_menu_item_activated(
        self, arg0: int, arg1: Callable[[], None]
    ) -> None: ...
    def set_on_tick_event(self, arg0: Callable[[], bool]) -> None: ...
    def show(self, arg0: bool) -> None: ...
    def show_dialog(self, arg0) -> None: ...
    @overload
    def show_menu(self, arg0: bool) -> None: ...
    @overload
    def show_menu(show) -> Any: ...
    def show_message_box(self, arg0: str, arg1: str) -> None: ...
    def size_to_fit(self) -> None: ...
    @property
    def content_rect(self) -> Any: ...
    @property
    def is_active_window(self) -> bool: ...
    @property
    def is_visible(self) -> bool: ...
    @property
    def renderer(self) -> open3d.visualization.rendering.Renderer: ...
    @property
    def scaling(self) -> float: ...
    @property
    def theme(self) -> Any: ...

class WindowBase:
    def __init__(self, *args, **kwargs) -> None: ...

__all__ = [
    "A",
    "ALT",
    "AMPERSAND",
    "ASTERISK",
    "AT",
    "B",
    "BACKSLASH",
    "BACKSPACE",
    "BACKTICK",
    "BUTTON4",
    "BUTTON5",
    "C",
    "CAPS_LOCK",
    "CARET",
    "COLON",
    "COMMA",
    "CTRL",
    "D",
    "DELETE",
    "DOLLAR_SIGN",
    "DOUBLE_QUOTE",
    "DOWN",
    "E",
    "EIGHT",
    "END",
    "ENTER",
    "EQUALS",
    "ESCAPE",
    "EXCLAMATION_MARK",
    "F",
    "F1",
    "F10",
    "F11",
    "F12",
    "F2",
    "F3",
    "F4",
    "F5",
    "F6",
    "F7",
    "F8",
    "F9",
    "FIVE",
    "FOUR",
    "G",
    "GREATER_THAN",
    "H",
    "HASH",
    "HOME",
    "I",
    "INSERT",
    "J",
    "K",
    "L",
    "LEFT",
    "LEFT_BRACE",
    "LEFT_BRACKET",
    "LEFT_CONTROL",
    "LEFT_PAREN",
    "LEFT_SHIFT",
    "LESS_THAN",
    "M",
    "META",
    "MIDDLE",
    "MINUS",
    "N",
    "NINE",
    "NONE",
    "O",
    "ONE",
    "P",
    "PAGE_DOWN",
    "PAGE_UP",
    "PERCENT",
    "PERIOD",
    "PIPE",
    "PLUS",
    "Q",
    "QUESTION_MARK",
    "QUOTE",
    "R",
    "RIGHT",
    "RIGHT_BRACE",
    "RIGHT_BRACKET",
    "RIGHT_CONTROL",
    "RIGHT_PAREN",
    "RIGHT_SHIFT",
    "S",
    "SEMICOLON",
    "SEVEN",
    "SHIFT",
    "SIX",
    "SLASH",
    "SPACE",
    "T",
    "TAB",
    "THREE",
    "TILDE",
    "TWO",
    "U",
    "UNDERSCORE",
    "UNKNOWN",
    "UP",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "ZERO",
    "Application",
    "Button",
    "CheckableTextTreeCell",
    "Checkbox",
    "CollapsableVert",
    "Color",
    "ColorEdit",
    "ColormapTreeCell",
    "Combobox",
    "Dialog",
    "FileDialog",
    "FontDescription",
    "FontStyle",
    "Horiz",
    "ImageWidget",
    "KeyEvent",
    "KeyModifier",
    "KeyName",
    "LUTTreeCell",
    "Label",
    "Label3D",
    "Layout1D",
    "LayoutContext",
    "ListView",
    "Margins",
    "Menu",
    "MouseButton",
    "MouseEvent",
    "NumberEdit",
    "ProgressBar",
    "RadioButton",
    "Rect",
    "SceneWidget",
    "ScrollableVert",
    "Size",
    "Slider",
    "StackedWidget",
    "TabControl",
    "TextEdit",
    "Theme",
    "ToggleSwitch",
    "TreeView",
    "UIImage",
    "VGrid",
    "VectorEdit",
    "Vert",
    "Widget",
    "WidgetProxy",
    "WidgetStack",
    "Window",
    "WindowBase",
]
