from typing import Dict, List, Set

import numpy as np
import numpy.typing as npt
from typing_extensions import Annotated

class ArmadilloMesh(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class BedroomRGBDImages(MultiDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def color_paths(self) -> List[str]: ...
    @property
    def depth_paths(self) -> List[str]: ...
    @property
    def reconstruction_path(self) -> str: ...
    @property
    def trajectory_log_path(self) -> str: ...

class BunnyMesh(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class CrateModel(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...

class Dataset:
    def __init__(self, prefix: str, data_root: str = ...) -> None: ...
    @property
    def data_root(self) -> str: ...
    @property
    def download_dir(self) -> str: ...
    @property
    def extract_dir(self) -> str: ...
    @property
    def prefix(self) -> str: ...

class DemoColoredICPPointClouds(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def paths(self) -> List[str]: ...

class DemoCropPointCloud(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def cropped_json_path(self) -> str: ...
    @property
    def point_cloud_path(self) -> str: ...

class DemoCustomVisualization(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def camera_trajectory_path(self) -> str: ...
    @property
    def point_cloud_path(self) -> str: ...
    @property
    def render_option_path(self) -> str: ...

class DemoFeatureMatchingPointClouds(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def fpfh_feature_paths(self) -> List[str]: ...
    @property
    def l32d_feature_paths(self) -> List[str]: ...
    @property
    def point_cloud_paths(self) -> List[str]: ...

class DemoICPPointClouds(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def paths(self) -> List[str]: ...
    @property
    def transformation_log_path(self) -> str: ...

class DemoPoseGraphOptimization(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def pose_graph_fragment_path(self) -> str: ...
    @property
    def pose_graph_global_path(self) -> str: ...

class EaglePointCloud(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class FlightHelmetModel(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...

class JackJackL515Bag(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class JuneauImage(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class KnotMesh(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class LivingRoomPointClouds(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def paths(self) -> List[str]: ...

class LoungeRGBDImages(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def color_paths(self) -> List[str]: ...
    @property
    def depth_paths(self) -> List[str]: ...
    @property
    def reconstruction_path(self) -> str: ...
    @property
    def trajectory_log_path(self) -> str: ...

class MetalTexture(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def albedo_texture_path(self) -> str: ...
    @property
    def metallic_texture_path(self) -> str: ...
    @property
    def normal_texture_path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...
    @property
    def roughness_texture_path(self) -> str: ...

class MonkeyModel(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...

class MultiDownloadDataset(Dataset):
    def __init__(
        self,
        prefix: str,
        url_mirrors_list: List[List[str]],
        md5_list: List[str],
        no_extract: bool = ...,
        data_root: str = ...,
    ) -> None: ...

class OfficePointClouds(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def paths(self) -> List[str]: ...

class PCDPointCloud(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class PLYPointCloud(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class PaintedPlasterTexture(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def albedo_texture_path(self) -> str: ...
    @property
    def normal_texture_path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...
    @property
    def roughness_texture_path(self) -> str: ...

class SampleFountainRGBDImages(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def color_paths(self) -> List[str]: ...
    @property
    def depth_paths(self) -> List[str]: ...
    @property
    def keyframe_poses_log_path(self) -> str: ...
    @property
    def reconstruction_path(self) -> str: ...

class SampleL515Bag(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...

class SampleNYURGBDImage(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def color_path(self) -> str: ...
    @property
    def depth_path(self) -> str: ...

class SampleRedwoodRGBDImages(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def camera_intrinsic_path(self) -> str: ...
    @property
    def color_paths(self) -> List[str]: ...
    @property
    def depth_paths(self) -> List[str]: ...
    @property
    def odometry_log_path(self) -> str: ...
    @property
    def reconstruction_path(self) -> str: ...
    @property
    def rgbd_match_path(self) -> str: ...
    @property
    def trajectory_log_path(self) -> str: ...

class SampleSUNRGBDImage(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def color_path(self) -> str: ...
    @property
    def depth_path(self) -> str: ...

class SampleTUMRGBDImage(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def color_path(self) -> str: ...
    @property
    def depth_path(self) -> str: ...

class SingleDownloadDataset(Dataset):
    def __init__(
        self,
        prefix: str,
        url_mirrors: List[str],
        md5: str,
        no_extract: bool = ...,
        data_root: str = ...,
    ) -> None: ...

class SwordModel(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...

class TerrazzoTexture(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def albedo_texture_path(self) -> str: ...
    @property
    def normal_texture_path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...
    @property
    def roughness_texture_path(self) -> str: ...

class TilesTexture(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def albedo_texture_path(self) -> str: ...
    @property
    def normal_texture_path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...
    @property
    def roughness_texture_path(self) -> str: ...

class WoodFloorTexture(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def albedo_texture_path(self) -> str: ...
    @property
    def normal_texture_path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...
    @property
    def roughness_texture_path(self) -> str: ...

class WoodTexture(SingleDownloadDataset):
    def __init__(self, data_root: str = ...) -> None: ...
    @property
    def albedo_texture_path(self) -> str: ...
    @property
    def normal_texture_path(self) -> str: ...
    @property
    def path_map(self) -> Dict[str, str]: ...
    @property
    def roughness_texture_path(self) -> str: ...

__all__ = [
    "ArmadilloMesh",
    "BedroomRGBDImages",
    "BunnyMesh",
    "CrateModel",
    "Dataset",
    "DemoColoredICPPointClouds",
    "DemoCropPointCloud",
    "DemoCustomVisualization",
    "DemoFeatureMatchingPointClouds",
    "DemoICPPointClouds",
    "DemoPoseGraphOptimization",
    "EaglePointCloud",
    "FlightHelmetModel",
    "JackJackL515Bag",
    "JuneauImage",
    "KnotMesh",
    "LivingRoomPointClouds",
    "LoungeRGBDImages",
    "MetalTexture",
    "MonkeyModel",
    "MultiDownloadDataset",
    "OfficePointClouds",
    "PCDPointCloud",
    "PLYPointCloud",
    "PaintedPlasterTexture",
    "SampleFountainRGBDImages",
    "SampleL515Bag",
    "SampleNYURGBDImage",
    "SampleRedwoodRGBDImages",
    "SampleSUNRGBDImage",
    "SampleTUMRGBDImage",
    "SingleDownloadDataset",
    "SwordModel",
    "TerrazzoTexture",
    "TilesTexture",
    "WoodFloorTexture",
    "WoodTexture",
]
