from typing import Any, Set, Tuple, overload

import numpy as np
import numpy.typing as npt
import open3d.core
from typing_extensions import Annotated

class control_grid:
    @overload
    def __init__(self, arg0: control_grid) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, grid_size: float, grid_count: int = ..., device: open3d.core.Device = ...
    ) -> None: ...
    @overload
    def __init__(
        self,
        grid_size: float,
        keys: open3d.core.Tensor,
        values: open3d.core.Tensor,
        device: open3d.core.Device = ...,
    ) -> None: ...
    def compactify(self) -> None: ...
    def deform(self, *args, **kwargs) -> Any: ...
    def get_anchor_idx(self) -> int: ...
    def get_curr_positions(self) -> open3d.core.Tensor: ...
    def get_device(self) -> open3d.core.Device: ...
    def get_hashmap(self) -> open3d.core.HashMap: ...
    def get_init_positions(self) -> open3d.core.Tensor: ...
    def get_neighbor_grid_map(
        self,
    ) -> Tuple[open3d.core.Tensor, open3d.core.Tensor, open3d.core.Tensor]: ...
    def parameterize(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    def touch(self, pointcloud) -> None: ...
    def __copy__(self) -> control_grid: ...
    def __deepcopy__(self, arg0: dict) -> control_grid: ...

class slac_debug_option:
    debug: bool
    debug_start_node_idx: int
    @overload
    def __init__(self, arg0: slac_debug_option) -> None: ...
    @overload
    def __init__(self, debug: bool = ..., debug_start_node_idx: int = ...) -> None: ...
    @overload
    def __init__(self, debug_start_node_idx: int) -> None: ...
    def __copy__(self) -> slac_debug_option: ...
    def __deepcopy__(self, arg0: dict) -> slac_debug_option: ...

class slac_optimizer_params:
    device: open3d.core.Device
    distance_threshold: float
    fitness_threshold: float
    max_iterations: int
    regularizer_weight: float
    slac_folder: str
    voxel_size: float
    @overload
    def __init__(self, arg0: slac_optimizer_params) -> None: ...
    @overload
    def __init__(
        self,
        max_iterations: int = ...,
        voxel_size: float = ...,
        distance_threshold: float = ...,
        fitness_threshold: float = ...,
        regularizer_weight: float = ...,
        device: open3d.core.Device = ...,
        slac_folder: str = ...,
    ) -> None: ...
    def get_subfolder_name(self) -> str: ...
    def __copy__(self) -> slac_optimizer_params: ...
    def __deepcopy__(self, arg0: dict) -> slac_optimizer_params: ...

def run_rigid_optimizer_for_fragments(
    fragment_filenames, fragment_pose_graph, params=..., debug_option=...
) -> Any: ...
def run_slac_optimizer_for_fragments(
    fragment_filenames, fragment_pose_graph, params=..., debug_option=...
) -> Any: ...
def save_correspondences_for_pointclouds(
    fnames_processed, fragment_pose_graph, params=..., debug_option=...
) -> Any: ...

__all__ = [
    "control_grid",
    "slac_debug_option",
    "slac_optimizer_params",
    "run_rigid_optimizer_for_fragments",
    "run_slac_optimizer_for_fragments",
    "save_correspondences_for_pointclouds",
]
