from typing import ClassVar, Set, overload

import numpy as np
import numpy.typing as npt
from typing_extensions import Annotated

CauchyLoss: RobustKernelMethod
GMLoss: RobustKernelMethod
GeneralizedLoss: RobustKernelMethod
HuberLoss: RobustKernelMethod
L1Loss: RobustKernelMethod
L2Loss: RobustKernelMethod
TukeyLoss: RobustKernelMethod

class RobustKernel:
    scaling_parameter: float
    shape_parameter: float
    type: RobustKernelMethod
    @overload
    def __init__(self, arg0: RobustKernel) -> None: ...
    @overload
    def __init__(
        self,
        type: RobustKernelMethod = ...,
        scaling_parameter: float = ...,
        shape_parameter: float = ...,
    ) -> None: ...
    def __copy__(self) -> RobustKernel: ...
    def __deepcopy__(self, arg0: dict) -> RobustKernel: ...

class RobustKernelMethod:
    __members__: ClassVar[dict] = ...  # read-only
    CauchyLoss: ClassVar[RobustKernelMethod] = ...
    GMLoss: ClassVar[RobustKernelMethod] = ...
    GeneralizedLoss: ClassVar[RobustKernelMethod] = ...
    HuberLoss: ClassVar[RobustKernelMethod] = ...
    L1Loss: ClassVar[RobustKernelMethod] = ...
    L2Loss: ClassVar[RobustKernelMethod] = ...
    TukeyLoss: ClassVar[RobustKernelMethod] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

__all__ = [
    "CauchyLoss",
    "GMLoss",
    "GeneralizedLoss",
    "HuberLoss",
    "L1Loss",
    "L2Loss",
    "TukeyLoss",
    "RobustKernel",
    "RobustKernelMethod",
]
