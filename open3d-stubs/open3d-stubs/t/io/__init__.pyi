from typing import Any, ClassVar, Set

import numpy as np
import numpy.typing as npt
import open3d.camera
import open3d.core
from typing_extensions import Annotated

class RGBDSensor:
    def __init__(self, *args, **kwargs) -> None: ...

class RGBDVideoMetadata:
    color_channels: int
    color_dt: open3d.core.Dtype
    color_format: str
    depth_dt: open3d.core.Dtype
    depth_format: str
    depth_scale: float
    device_name: str
    fps: float
    height: int
    intrinsics: open3d.camera.PinholeCameraIntrinsic
    serial_number: str
    stream_length_usec: int
    width: int
    def __init__(self) -> None: ...

class RGBDVideoReader:
    def __init__(self) -> None: ...
    def create(self, *args, **kwargs) -> Any: ...
    def save_frames(self, frame_path, start_time_us=..., end_time_us=...) -> Any: ...

class SensorType:
    __members__: ClassVar[dict] = ...  # read-only
    AZURE_KINECT: ClassVar[SensorType] = ...
    REAL_SENSE: ClassVar[SensorType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def read_image(filename) -> Any: ...
def read_point_cloud(
    filename,
    format=...,
    remove_nan_points=...,
    remove_infinite_points=...,
    print_progress=...,
) -> Any: ...
def write_image(filename, image, quality=...) -> Any: ...
def write_point_cloud(
    filename, pointcloud, write_ascii=..., compressed=..., print_progress=...
) -> Any: ...

__all__ = [
    "RGBDSensor",
    "RGBDVideoMetadata",
    "RGBDVideoReader",
    "SensorType",
    "read_image",
    "read_point_cloud",
    "write_image",
    "write_point_cloud",
]
