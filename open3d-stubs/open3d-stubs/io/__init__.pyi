from typing import Any, ClassVar, Set

import numpy as np
import numpy.typing as npt
from typing_extensions import Annotated

from . import rpc

CONTAINS_LINES: FileGeometry
CONTAINS_POINTS: FileGeometry
CONTAINS_TRIANGLES: FileGeometry
CONTENTS_UNKNOWN: FileGeometry

class FileGeometry:
    __members__: ClassVar[dict] = ...  # read-only
    CONTAINS_LINES: ClassVar[FileGeometry] = ...
    CONTAINS_POINTS: ClassVar[FileGeometry] = ...
    CONTAINS_TRIANGLES: ClassVar[FileGeometry] = ...
    CONTENTS_UNKNOWN: ClassVar[FileGeometry] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def read_feature(filename) -> Any: ...
def read_file_geometry_type(arg0: str) -> FileGeometry: ...
def read_image(filename) -> Any: ...
def read_line_set(filename, format=..., print_progress=...) -> Any: ...
def read_octree(filename, format=...) -> Any: ...
def read_pinhole_camera_intrinsic(filename) -> Any: ...
def read_pinhole_camera_parameters(filename) -> Any: ...
def read_pinhole_camera_trajectory(filename) -> Any: ...
def read_point_cloud(
    filename,
    format=...,
    remove_nan_points=...,
    remove_infinite_points=...,
    print_progress=...,
) -> Any: ...
def read_pose_graph(filename) -> Any: ...
def read_triangle_mesh(
    filename, enable_post_processing=..., print_progress=...
) -> Any: ...
def read_triangle_model(filename, print_progress=...) -> Any: ...
def read_voxel_grid(filename, format=..., print_progress=...) -> Any: ...
def write_feature(filename, feature) -> Any: ...
def write_image(filename, image, quality=...) -> Any: ...
def write_line_set(
    filename, line_set, write_ascii=..., compressed=..., print_progress=...
) -> Any: ...
def write_octree(filename, octree) -> Any: ...
def write_pinhole_camera_intrinsic(filename, intrinsic) -> Any: ...
def write_pinhole_camera_parameters(filename, parameters) -> Any: ...
def write_pinhole_camera_trajectory(filename, trajectory) -> Any: ...
def write_point_cloud(
    filename, pointcloud, write_ascii=..., compressed=..., print_progress=...
) -> Any: ...
def write_pose_graph(filename, pose_graph) -> Any: ...
def write_triangle_mesh(
    filename,
    mesh,
    write_ascii=...,
    compressed=...,
    write_vertex_normals=...,
    write_vertex_colors=...,
    write_triangle_uvs=...,
    print_progress=...,
) -> Any: ...
def write_voxel_grid(
    filename, voxel_grid, write_ascii=..., compressed=..., print_progress=...
) -> Any: ...

__all__ = [
    "rpc",
    "CONTAINS_LINES",
    "CONTAINS_POINTS",
    "CONTAINS_TRIANGLES",
    "CONTENTS_UNKNOWN",
    "FileGeometry",
    "read_feature",
    "read_file_geometry_type",
    "read_image",
    "read_line_set",
    "read_octree",
    "read_pinhole_camera_intrinsic",
    "read_pinhole_camera_parameters",
    "read_pinhole_camera_trajectory",
    "read_point_cloud",
    "read_pose_graph",
    "read_triangle_mesh",
    "read_triangle_model",
    "read_voxel_grid",
    "write_feature",
    "write_image",
    "write_line_set",
    "write_octree",
    "write_pinhole_camera_intrinsic",
    "write_pinhole_camera_parameters",
    "write_pinhole_camera_trajectory",
    "write_point_cloud",
    "write_pose_graph",
    "write_triangle_mesh",
    "write_voxel_grid",
]
