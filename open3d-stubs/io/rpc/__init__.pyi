from typing import Any, Set, Tuple

import numpy as np
import numpy.typing as npt
import open3d.t.geometry
from typing_extensions import Annotated

class BufferConnection(_ConnectionBase):
    def __init__(self) -> None: ...
    def get_buffer(self) -> bytes: ...

class Connection(_ConnectionBase):
    def __init__(
        self, address: str = ..., connect_timeout: int = ..., timeout: int = ...
    ) -> None: ...

class _ConnectionBase:
    def __init__(self, *args, **kwargs) -> None: ...

class _DummyReceiver:
    def __init__(self, address: str = ..., timeout: int = ...) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

def data_buffer_to_meta_geometry(
    data: str,
) -> Tuple[str, float, open3d.t.geometry.Geometry]: ...
def destroy_zmq_context() -> None: ...
def set_active_camera(path, connection=...) -> Any: ...
def set_legacy_camera(camera, path=..., time=..., layer=..., connection=...) -> Any: ...
def set_mesh_data(*args, **kwargs) -> Any: ...
def set_point_cloud(pcd, path=..., time=..., layer=..., connection=...) -> Any: ...
def set_time(time, connection=...) -> Any: ...
def set_triangle_mesh(mesh, path=..., time=..., layer=..., connection=...) -> Any: ...

__all__ = [
    "BufferConnection",
    "Connection",
    "_ConnectionBase",
    "_DummyReceiver",
    "data_buffer_to_meta_geometry",
    "destroy_zmq_context",
    "set_active_camera",
    "set_legacy_camera",
    "set_mesh_data",
    "set_point_cloud",
    "set_time",
    "set_triangle_mesh",
]
