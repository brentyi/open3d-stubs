from typing import Any, Optional, Set

import numpy as np
import numpy.typing as npt
import open3d.core
from typing_extensions import Annotated

class NearestNeighborSearch:
    def __init__(
        self, dataset_points: open3d.core.Tensor, index_dtype: open3d.core.Dtype = ...
    ) -> None: ...
    def fixed_radius_index(self, radius: Optional[float] = ...) -> bool: ...
    def fixed_radius_search(self, query_points, radius, sort=...) -> Any: ...
    def hybrid_index(self, radius: Optional[float] = ...) -> bool: ...
    def hybrid_search(self, query_points, radius, max_knn) -> Any: ...
    def knn_index(self) -> bool: ...
    def knn_search(self, query_points, knn) -> Any: ...
    def multi_radius_index(self) -> bool: ...
    def multi_radius_search(self, query_points, radii) -> Any: ...

__all__ = ["NearestNeighborSearch"]
