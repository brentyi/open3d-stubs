from typing import (
    Any,
    ClassVar,
    Iterable,
    Iterator,
    List,
    Optional,
    Set,
    Tuple,
    overload,
)

import numpy as np
import numpy.typing as npt
from typing_extensions import Annotated

from . import cuda, kernel, nns

bool: Dtype
bool8: Dtype
float32: Dtype
float64: Dtype
int16: Dtype
int32: Dtype
int64: Dtype
int8: Dtype
uint16: Dtype
uint32: Dtype
uint64: Dtype
uint8: Dtype
undefined: Dtype

class Blob:
    def __init__(self, *args, **kwargs) -> None: ...

class Device:
    class DeviceType:
        __members__: ClassVar[dict] = ...  # read-only
        CPU: ClassVar[Device.DeviceType] = ...
        CUDA: ClassVar[Device.DeviceType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> __builtins__.bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> __builtins__.bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    CPU: ClassVar[Device.DeviceType] = ...
    CUDA: ClassVar[Device.DeviceType] = ...
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def get_id(self) -> int: ...
    def get_type(self, *args, **kwargs) -> Any: ...
    def __ene__(self, arg0: Device) -> __builtins__.bool: ...
    def __eq__(self, arg0: Device) -> __builtins__.bool: ...

class Dtype:
    Bool: ClassVar[Dtype] = ...  # read-only
    Float32: ClassVar[Dtype] = ...  # read-only
    Float64: ClassVar[Dtype] = ...  # read-only
    Int16: ClassVar[Dtype] = ...  # read-only
    Int32: ClassVar[Dtype] = ...  # read-only
    Int64: ClassVar[Dtype] = ...  # read-only
    Int8: ClassVar[Dtype] = ...  # read-only
    UInt16: ClassVar[Dtype] = ...  # read-only
    UInt32: ClassVar[Dtype] = ...  # read-only
    UInt64: ClassVar[Dtype] = ...  # read-only
    UInt8: ClassVar[Dtype] = ...  # read-only
    Undefined: ClassVar[Dtype] = ...  # read-only
    def __init__(self, arg0, arg1: int, arg2: str) -> None: ...
    def byte_code(self, *args, **kwargs) -> Any: ...
    def byte_size(self) -> int: ...
    def __ene__(self, arg0: Dtype) -> __builtins__.bool: ...
    def __eq__(self, arg0: Dtype) -> __builtins__.bool: ...
    def __hash__(self) -> int: ...

class DynamicSizeVector:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: DynamicSizeVector) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Optional[int]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Optional[int]) -> int: ...
    @overload
    def extend(self, L: DynamicSizeVector) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Optional[int]) -> None: ...
    @overload
    def pop(self) -> Optional[int]: ...
    @overload
    def pop(self, i: int) -> Optional[int]: ...
    def remove(self, x: Optional[int]) -> None: ...
    def __bool__(self) -> __builtins__.bool: ...
    def __contains__(self, x: Optional[int]) -> __builtins__.bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: DynamicSizeVector) -> __builtins__.bool: ...
    @overload
    def __getitem__(self, s: slice) -> DynamicSizeVector: ...
    @overload
    def __getitem__(self, arg0: int) -> Optional[int]: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: DynamicSizeVector) -> __builtins__.bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Optional[int]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: DynamicSizeVector) -> None: ...

class HashMap:
    @overload
    def __init__(
        self,
        init_capacity,
        key_dtype,
        key_element_shape,
        value_dtype,
        value_element_shape,
        device=...,
    ) -> None: ...
    @overload
    def __init__(
        self,
        init_capacity,
        key_dtype,
        key_element_shape,
        value_dtypes,
        value_element_shapes,
        device=...,
    ) -> None: ...
    def activate(self, keys) -> Any: ...
    def active_buf_indices(self) -> Tensor: ...
    def capacity(self) -> int: ...
    def clone(self) -> HashMap: ...
    def cpu(self) -> HashMap: ...
    def cuda(self, device_id=...) -> Any: ...
    def erase(self, keys) -> Any: ...
    def find(self, keys) -> Any: ...
    @overload
    def insert(self, keys, values) -> Any: ...
    @overload
    def insert(self, keys, list_values) -> Any: ...
    def key_tensor(self) -> Tensor: ...
    def load(self, *args, **kwargs) -> Any: ...
    def reserve(self, capacity) -> Any: ...
    def save(self, file_name) -> Any: ...
    def size(self) -> int: ...
    def to(self, device, copy=...) -> Any: ...
    @overload
    def value_tensor(self) -> Any: ...
    @overload
    def value_tensor(self, value_buffer_id) -> Any: ...
    def value_tensors(self) -> List[Tensor]: ...
    @property
    def device(self) -> Device: ...
    @property
    def is_cpu(self) -> __builtins__.bool: ...
    @property
    def is_cuda(self) -> __builtins__.bool: ...

class HashSet:
    def __init__(
        self, init_capacity, key_dtype, key_element_shape, device=...
    ) -> None: ...
    def active_buf_indices(self) -> Tensor: ...
    def capacity(self) -> int: ...
    def clone(self) -> HashSet: ...
    def cpu(self) -> HashSet: ...
    def cuda(self, device_id=...) -> Any: ...
    def erase(self, keys) -> Any: ...
    def find(self, keys) -> Any: ...
    def insert(self, keys) -> Any: ...
    def key_tensor(self) -> Tensor: ...
    def load(self, *args, **kwargs) -> Any: ...
    def reserve(self, capacity) -> Any: ...
    def save(self, file_name) -> Any: ...
    def size(self) -> int: ...
    def to(self, device, copy=...) -> Any: ...
    @property
    def device(self) -> Device: ...
    @property
    def is_cpu(self) -> __builtins__.bool: ...
    @property
    def is_cuda(self) -> __builtins__.bool: ...

class Scalar:
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: __builtins__.bool) -> None: ...

class SizeVector:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: SizeVector) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: SizeVector) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> __builtins__.bool: ...
    def __contains__(self, x: int) -> __builtins__.bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: SizeVector) -> __builtins__.bool: ...
    @overload
    def __getitem__(self, s: slice) -> SizeVector: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: SizeVector) -> __builtins__.bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: SizeVector) -> None: ...

class Tensor:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self, np_array, dtype=..., device=...) -> None: ...
    @overload
    def __init__(self, scalar_value, dtype=..., device=...) -> None: ...
    @overload
    def __init__(self, scalar_value, dtype=..., device=...) -> None: ...
    @overload
    def __init__(self, scalar_value, dtype=..., device=...) -> None: ...
    @overload
    def __init__(self, shape, dtype=..., device=...) -> None: ...
    @overload
    def __init__(self, shape, dtype=..., device=...) -> None: ...
    def T(self) -> Tensor: ...
    def abs(self) -> Tensor: ...
    def abs_(self) -> Tensor: ...
    @overload
    def add(self, arg0: Tensor) -> Tensor: ...
    @overload
    def add(self, arg0: float) -> Tensor: ...
    @overload
    def add(self, arg0: float) -> Tensor: ...
    @overload
    def add(self, arg0: int) -> Tensor: ...
    @overload
    def add(self, arg0: int) -> Tensor: ...
    @overload
    def add(self, arg0: int) -> Tensor: ...
    @overload
    def add(self, arg0: int) -> Tensor: ...
    @overload
    def add(self, arg0: int) -> Tensor: ...
    @overload
    def add(self, arg0: int) -> Tensor: ...
    @overload
    def add(self, arg0: int) -> Tensor: ...
    @overload
    def add(self, arg0: int) -> Tensor: ...
    @overload
    def add(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def add_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def add_(self, arg0: float) -> Tensor: ...
    @overload
    def add_(self, arg0: float) -> Tensor: ...
    @overload
    def add_(self, arg0: int) -> Tensor: ...
    @overload
    def add_(self, arg0: int) -> Tensor: ...
    @overload
    def add_(self, arg0: int) -> Tensor: ...
    @overload
    def add_(self, arg0: int) -> Tensor: ...
    @overload
    def add_(self, arg0: int) -> Tensor: ...
    @overload
    def add_(self, arg0: int) -> Tensor: ...
    @overload
    def add_(self, arg0: int) -> Tensor: ...
    @overload
    def add_(self, arg0: int) -> Tensor: ...
    @overload
    def add_(self, arg0: __builtins__.bool) -> Tensor: ...
    def all(
        self, dim: Optional[SizeVector] = ..., keepdim: __builtins__.bool = ...
    ) -> Tensor: ...
    @overload
    def allclose(self, other, rtol=..., atol=...) -> Any: ...
    @overload
    def allclose(b) -> Any: ...
    @overload
    def allclose(a) -> Any: ...
    def any(
        self, dim: Optional[SizeVector] = ..., keepdim: __builtins__.bool = ...
    ) -> Tensor: ...
    @overload
    def append(self, values: Tensor, axis: Optional[int] = ...) -> Tensor: ...
    @overload
    def append(b, axis=...) -> Any: ...
    @overload
    def append(b) -> Any: ...
    def arange(self, *args, **kwargs) -> Any: ...
    def argmax(self, dim: Optional[SizeVector] = ...) -> Tensor: ...
    def argmin(self, dim: Optional[SizeVector] = ...) -> Tensor: ...
    def ceil(self) -> Tensor: ...
    @overload
    def clip(self, arg0: float, arg1: float) -> Tensor: ...
    @overload
    def clip(self, arg0: float, arg1: float) -> Tensor: ...
    @overload
    def clip(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip(self, arg0: __builtins__.bool, arg1: __builtins__.bool) -> Tensor: ...
    @overload
    def clip_(self, arg0: float, arg1: float) -> Tensor: ...
    @overload
    def clip_(self, arg0: float, arg1: float) -> Tensor: ...
    @overload
    def clip_(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip_(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip_(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip_(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip_(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip_(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip_(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip_(self, arg0: int, arg1: int) -> Tensor: ...
    @overload
    def clip_(self, arg0: __builtins__.bool, arg1: __builtins__.bool) -> Tensor: ...
    def clone(self) -> Tensor: ...
    def contiguous(self) -> Tensor: ...
    def cos(self) -> Tensor: ...
    def cos_(self) -> Tensor: ...
    def cpu(self) -> Tensor: ...
    def cuda(self, device_id: int = ...) -> Tensor: ...
    def det(self) -> float: ...
    def diag(self, *args, **kwargs) -> Any: ...
    @overload
    def div(self, arg0: Tensor) -> Tensor: ...
    @overload
    def div(self, arg0: float) -> Tensor: ...
    @overload
    def div(self, arg0: float) -> Tensor: ...
    @overload
    def div(self, arg0: int) -> Tensor: ...
    @overload
    def div(self, arg0: int) -> Tensor: ...
    @overload
    def div(self, arg0: int) -> Tensor: ...
    @overload
    def div(self, arg0: int) -> Tensor: ...
    @overload
    def div(self, arg0: int) -> Tensor: ...
    @overload
    def div(self, arg0: int) -> Tensor: ...
    @overload
    def div(self, arg0: int) -> Tensor: ...
    @overload
    def div(self, arg0: int) -> Tensor: ...
    @overload
    def div(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def div_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def div_(self, arg0: float) -> Tensor: ...
    @overload
    def div_(self, arg0: float) -> Tensor: ...
    @overload
    def div_(self, arg0: int) -> Tensor: ...
    @overload
    def div_(self, arg0: int) -> Tensor: ...
    @overload
    def div_(self, arg0: int) -> Tensor: ...
    @overload
    def div_(self, arg0: int) -> Tensor: ...
    @overload
    def div_(self, arg0: int) -> Tensor: ...
    @overload
    def div_(self, arg0: int) -> Tensor: ...
    @overload
    def div_(self, arg0: int) -> Tensor: ...
    @overload
    def div_(self, arg0: int) -> Tensor: ...
    @overload
    def div_(self, arg0: __builtins__.bool) -> Tensor: ...
    def empty(self, *args, **kwargs) -> Any: ...
    @overload
    def eq(self, arg0: Tensor) -> Tensor: ...
    @overload
    def eq(self, arg0: float) -> Tensor: ...
    @overload
    def eq(self, arg0: float) -> Tensor: ...
    @overload
    def eq(self, arg0: int) -> Tensor: ...
    @overload
    def eq(self, arg0: int) -> Tensor: ...
    @overload
    def eq(self, arg0: int) -> Tensor: ...
    @overload
    def eq(self, arg0: int) -> Tensor: ...
    @overload
    def eq(self, arg0: int) -> Tensor: ...
    @overload
    def eq(self, arg0: int) -> Tensor: ...
    @overload
    def eq(self, arg0: int) -> Tensor: ...
    @overload
    def eq(self, arg0: int) -> Tensor: ...
    @overload
    def eq(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def eq_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def eq_(self, arg0: float) -> Tensor: ...
    @overload
    def eq_(self, arg0: float) -> Tensor: ...
    @overload
    def eq_(self, arg0: int) -> Tensor: ...
    @overload
    def eq_(self, arg0: int) -> Tensor: ...
    @overload
    def eq_(self, arg0: int) -> Tensor: ...
    @overload
    def eq_(self, arg0: int) -> Tensor: ...
    @overload
    def eq_(self, arg0: int) -> Tensor: ...
    @overload
    def eq_(self, arg0: int) -> Tensor: ...
    @overload
    def eq_(self, arg0: int) -> Tensor: ...
    @overload
    def eq_(self, arg0: int) -> Tensor: ...
    @overload
    def eq_(self, arg0: __builtins__.bool) -> Tensor: ...
    def exp(self) -> Tensor: ...
    def exp_(self) -> Tensor: ...
    def eye(self, *args, **kwargs) -> Any: ...
    @overload
    def flatten(self, start_dim=..., end_dim=...) -> Any: ...
    @overload
    def flatten(inclusive) -> Any: ...
    def floor(self) -> Tensor: ...
    def from_dlpack(self, *args, **kwargs) -> Any: ...
    def from_numpy(self, *args, **kwargs) -> Any: ...
    def full(self, *args, **kwargs) -> Any: ...
    @overload
    def ge(self, arg0: Tensor) -> Tensor: ...
    @overload
    def ge(self, arg0: float) -> Tensor: ...
    @overload
    def ge(self, arg0: float) -> Tensor: ...
    @overload
    def ge(self, arg0: int) -> Tensor: ...
    @overload
    def ge(self, arg0: int) -> Tensor: ...
    @overload
    def ge(self, arg0: int) -> Tensor: ...
    @overload
    def ge(self, arg0: int) -> Tensor: ...
    @overload
    def ge(self, arg0: int) -> Tensor: ...
    @overload
    def ge(self, arg0: int) -> Tensor: ...
    @overload
    def ge(self, arg0: int) -> Tensor: ...
    @overload
    def ge(self, arg0: int) -> Tensor: ...
    @overload
    def ge(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def ge_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def ge_(self, arg0: float) -> Tensor: ...
    @overload
    def ge_(self, arg0: float) -> Tensor: ...
    @overload
    def ge_(self, arg0: int) -> Tensor: ...
    @overload
    def ge_(self, arg0: int) -> Tensor: ...
    @overload
    def ge_(self, arg0: int) -> Tensor: ...
    @overload
    def ge_(self, arg0: int) -> Tensor: ...
    @overload
    def ge_(self, arg0: int) -> Tensor: ...
    @overload
    def ge_(self, arg0: int) -> Tensor: ...
    @overload
    def ge_(self, arg0: int) -> Tensor: ...
    @overload
    def ge_(self, arg0: int) -> Tensor: ...
    @overload
    def ge_(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def gt(self, arg0: Tensor) -> Tensor: ...
    @overload
    def gt(self, arg0: float) -> Tensor: ...
    @overload
    def gt(self, arg0: float) -> Tensor: ...
    @overload
    def gt(self, arg0: int) -> Tensor: ...
    @overload
    def gt(self, arg0: int) -> Tensor: ...
    @overload
    def gt(self, arg0: int) -> Tensor: ...
    @overload
    def gt(self, arg0: int) -> Tensor: ...
    @overload
    def gt(self, arg0: int) -> Tensor: ...
    @overload
    def gt(self, arg0: int) -> Tensor: ...
    @overload
    def gt(self, arg0: int) -> Tensor: ...
    @overload
    def gt(self, arg0: int) -> Tensor: ...
    @overload
    def gt(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def gt_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def gt_(self, arg0: float) -> Tensor: ...
    @overload
    def gt_(self, arg0: float) -> Tensor: ...
    @overload
    def gt_(self, arg0: int) -> Tensor: ...
    @overload
    def gt_(self, arg0: int) -> Tensor: ...
    @overload
    def gt_(self, arg0: int) -> Tensor: ...
    @overload
    def gt_(self, arg0: int) -> Tensor: ...
    @overload
    def gt_(self, arg0: int) -> Tensor: ...
    @overload
    def gt_(self, arg0: int) -> Tensor: ...
    @overload
    def gt_(self, arg0: int) -> Tensor: ...
    @overload
    def gt_(self, arg0: int) -> Tensor: ...
    @overload
    def gt_(self, arg0: __builtins__.bool) -> Tensor: ...
    def inv(self) -> Tensor: ...
    def is_contiguous(self) -> __builtins__.bool: ...
    def isclose(self, other, rtol=..., atol=...) -> Any: ...
    def isfinite(self) -> Tensor: ...
    def isinf(self) -> Tensor: ...
    def isnan(self) -> Tensor: ...
    def issame(self, arg0: Tensor) -> __builtins__.bool: ...
    def item(self) -> object: ...
    @overload
    def le(self, arg0: Tensor) -> Tensor: ...
    @overload
    def le(self, arg0: float) -> Tensor: ...
    @overload
    def le(self, arg0: float) -> Tensor: ...
    @overload
    def le(self, arg0: int) -> Tensor: ...
    @overload
    def le(self, arg0: int) -> Tensor: ...
    @overload
    def le(self, arg0: int) -> Tensor: ...
    @overload
    def le(self, arg0: int) -> Tensor: ...
    @overload
    def le(self, arg0: int) -> Tensor: ...
    @overload
    def le(self, arg0: int) -> Tensor: ...
    @overload
    def le(self, arg0: int) -> Tensor: ...
    @overload
    def le(self, arg0: int) -> Tensor: ...
    @overload
    def le(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def le_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def le_(self, arg0: float) -> Tensor: ...
    @overload
    def le_(self, arg0: float) -> Tensor: ...
    @overload
    def le_(self, arg0: int) -> Tensor: ...
    @overload
    def le_(self, arg0: int) -> Tensor: ...
    @overload
    def le_(self, arg0: int) -> Tensor: ...
    @overload
    def le_(self, arg0: int) -> Tensor: ...
    @overload
    def le_(self, arg0: int) -> Tensor: ...
    @overload
    def le_(self, arg0: int) -> Tensor: ...
    @overload
    def le_(self, arg0: int) -> Tensor: ...
    @overload
    def le_(self, arg0: int) -> Tensor: ...
    @overload
    def le_(self, arg0: __builtins__.bool) -> Tensor: ...
    def load(self, *args, **kwargs) -> Any: ...
    @overload
    def logical_and(self, arg0: Tensor) -> Tensor: ...
    @overload
    def logical_and(self, arg0: float) -> Tensor: ...
    @overload
    def logical_and(self, arg0: float) -> Tensor: ...
    @overload
    def logical_and(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: float) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: float) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_and_(self, arg0: __builtins__.bool) -> Tensor: ...
    def logical_not(self) -> Tensor: ...
    def logical_not_(self) -> Tensor: ...
    @overload
    def logical_or(self, arg0: Tensor) -> Tensor: ...
    @overload
    def logical_or(self, arg0: float) -> Tensor: ...
    @overload
    def logical_or(self, arg0: float) -> Tensor: ...
    @overload
    def logical_or(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: float) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: float) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_or_(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: Tensor) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: float) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: float) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: float) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: float) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: int) -> Tensor: ...
    @overload
    def logical_xor_(self, arg0: __builtins__.bool) -> Tensor: ...
    def lstsq(self, B: Tensor) -> Tensor: ...
    @overload
    def lt(self, arg0: Tensor) -> Tensor: ...
    @overload
    def lt(self, arg0: float) -> Tensor: ...
    @overload
    def lt(self, arg0: float) -> Tensor: ...
    @overload
    def lt(self, arg0: int) -> Tensor: ...
    @overload
    def lt(self, arg0: int) -> Tensor: ...
    @overload
    def lt(self, arg0: int) -> Tensor: ...
    @overload
    def lt(self, arg0: int) -> Tensor: ...
    @overload
    def lt(self, arg0: int) -> Tensor: ...
    @overload
    def lt(self, arg0: int) -> Tensor: ...
    @overload
    def lt(self, arg0: int) -> Tensor: ...
    @overload
    def lt(self, arg0: int) -> Tensor: ...
    @overload
    def lt(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def lt_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def lt_(self, arg0: float) -> Tensor: ...
    @overload
    def lt_(self, arg0: float) -> Tensor: ...
    @overload
    def lt_(self, arg0: int) -> Tensor: ...
    @overload
    def lt_(self, arg0: int) -> Tensor: ...
    @overload
    def lt_(self, arg0: int) -> Tensor: ...
    @overload
    def lt_(self, arg0: int) -> Tensor: ...
    @overload
    def lt_(self, arg0: int) -> Tensor: ...
    @overload
    def lt_(self, arg0: int) -> Tensor: ...
    @overload
    def lt_(self, arg0: int) -> Tensor: ...
    @overload
    def lt_(self, arg0: int) -> Tensor: ...
    @overload
    def lt_(self, arg0: __builtins__.bool) -> Tensor: ...
    def lu(self, permute_l=...) -> Any: ...
    @overload
    def lu_ipiv(self) -> Tuple[Tensor, Tensor]: ...
    def matmul(self, arg0: Tensor) -> Tensor: ...
    def max(
        self, dim: Optional[SizeVector] = ..., keepdim: __builtins__.bool = ...
    ) -> Tensor: ...
    def mean(
        self, dim: Optional[SizeVector] = ..., keepdim: __builtins__.bool = ...
    ) -> Tensor: ...
    def min(
        self, dim: Optional[SizeVector] = ..., keepdim: __builtins__.bool = ...
    ) -> Tensor: ...
    @overload
    def mul(self, arg0: Tensor) -> Tensor: ...
    @overload
    def mul(self, arg0: float) -> Tensor: ...
    @overload
    def mul(self, arg0: float) -> Tensor: ...
    @overload
    def mul(self, arg0: int) -> Tensor: ...
    @overload
    def mul(self, arg0: int) -> Tensor: ...
    @overload
    def mul(self, arg0: int) -> Tensor: ...
    @overload
    def mul(self, arg0: int) -> Tensor: ...
    @overload
    def mul(self, arg0: int) -> Tensor: ...
    @overload
    def mul(self, arg0: int) -> Tensor: ...
    @overload
    def mul(self, arg0: int) -> Tensor: ...
    @overload
    def mul(self, arg0: int) -> Tensor: ...
    @overload
    def mul(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def mul_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def mul_(self, arg0: float) -> Tensor: ...
    @overload
    def mul_(self, arg0: float) -> Tensor: ...
    @overload
    def mul_(self, arg0: int) -> Tensor: ...
    @overload
    def mul_(self, arg0: int) -> Tensor: ...
    @overload
    def mul_(self, arg0: int) -> Tensor: ...
    @overload
    def mul_(self, arg0: int) -> Tensor: ...
    @overload
    def mul_(self, arg0: int) -> Tensor: ...
    @overload
    def mul_(self, arg0: int) -> Tensor: ...
    @overload
    def mul_(self, arg0: int) -> Tensor: ...
    @overload
    def mul_(self, arg0: int) -> Tensor: ...
    @overload
    def mul_(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def ne(self, arg0: Tensor) -> Tensor: ...
    @overload
    def ne(self, arg0: float) -> Tensor: ...
    @overload
    def ne(self, arg0: float) -> Tensor: ...
    @overload
    def ne(self, arg0: int) -> Tensor: ...
    @overload
    def ne(self, arg0: int) -> Tensor: ...
    @overload
    def ne(self, arg0: int) -> Tensor: ...
    @overload
    def ne(self, arg0: int) -> Tensor: ...
    @overload
    def ne(self, arg0: int) -> Tensor: ...
    @overload
    def ne(self, arg0: int) -> Tensor: ...
    @overload
    def ne(self, arg0: int) -> Tensor: ...
    @overload
    def ne(self, arg0: int) -> Tensor: ...
    @overload
    def ne(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def ne_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def ne_(self, arg0: float) -> Tensor: ...
    @overload
    def ne_(self, arg0: float) -> Tensor: ...
    @overload
    def ne_(self, arg0: int) -> Tensor: ...
    @overload
    def ne_(self, arg0: int) -> Tensor: ...
    @overload
    def ne_(self, arg0: int) -> Tensor: ...
    @overload
    def ne_(self, arg0: int) -> Tensor: ...
    @overload
    def ne_(self, arg0: int) -> Tensor: ...
    @overload
    def ne_(self, arg0: int) -> Tensor: ...
    @overload
    def ne_(self, arg0: int) -> Tensor: ...
    @overload
    def ne_(self, arg0: int) -> Tensor: ...
    @overload
    def ne_(self, arg0: __builtins__.bool) -> Tensor: ...
    def neg(self) -> Tensor: ...
    def neg_(self) -> Tensor: ...
    def nonzero(self, as_tuple=...) -> Any: ...
    def num_elements(self) -> int: ...
    def numpy(self) -> npt.NDArray: ...
    def ones(self, *args, **kwargs) -> Any: ...
    def prod(
        self, dim: Optional[SizeVector] = ..., keepdim: __builtins__.bool = ...
    ) -> Tensor: ...
    def reshape(self, dst_shape) -> Any: ...
    def round(self) -> Tensor: ...
    def save(self, file_name: str) -> None: ...
    def sin(self) -> Tensor: ...
    def sin_(self) -> Tensor: ...
    def solve(self, B: Tensor) -> Tensor: ...
    def sqrt(self) -> Tensor: ...
    def sqrt_(self) -> Tensor: ...
    @overload
    def sub(self, arg0: Tensor) -> Tensor: ...
    @overload
    def sub(self, arg0: float) -> Tensor: ...
    @overload
    def sub(self, arg0: float) -> Tensor: ...
    @overload
    def sub(self, arg0: int) -> Tensor: ...
    @overload
    def sub(self, arg0: int) -> Tensor: ...
    @overload
    def sub(self, arg0: int) -> Tensor: ...
    @overload
    def sub(self, arg0: int) -> Tensor: ...
    @overload
    def sub(self, arg0: int) -> Tensor: ...
    @overload
    def sub(self, arg0: int) -> Tensor: ...
    @overload
    def sub(self, arg0: int) -> Tensor: ...
    @overload
    def sub(self, arg0: int) -> Tensor: ...
    @overload
    def sub(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def sub_(self, arg0: Tensor) -> Tensor: ...
    @overload
    def sub_(self, arg0: float) -> Tensor: ...
    @overload
    def sub_(self, arg0: float) -> Tensor: ...
    @overload
    def sub_(self, arg0: int) -> Tensor: ...
    @overload
    def sub_(self, arg0: int) -> Tensor: ...
    @overload
    def sub_(self, arg0: int) -> Tensor: ...
    @overload
    def sub_(self, arg0: int) -> Tensor: ...
    @overload
    def sub_(self, arg0: int) -> Tensor: ...
    @overload
    def sub_(self, arg0: int) -> Tensor: ...
    @overload
    def sub_(self, arg0: int) -> Tensor: ...
    @overload
    def sub_(self, arg0: int) -> Tensor: ...
    @overload
    def sub_(self, arg0: __builtins__.bool) -> Tensor: ...
    def sum(
        self, dim: Optional[SizeVector] = ..., keepdim: __builtins__.bool = ...
    ) -> Tensor: ...
    def svd(self) -> Tuple[Tensor, Tensor, Tensor]: ...
    @overload
    def to(self, dtype, copy=...) -> Any: ...
    @overload
    def to(self, device, copy=...) -> Any: ...
    @overload
    def to(self, dtype, copy=...) -> Any: ...
    def to_dlpack(self) -> Any: ...
    def tril(self, diagonal=...) -> Any: ...
    def triu(self, diagonal=...) -> Any: ...
    def triul(self, diagonal=...) -> Any: ...
    def trunc(self) -> Tensor: ...
    def zeros(self, *args, **kwargs) -> Any: ...
    @overload
    def __add__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __add__(self, arg0: float) -> Tensor: ...
    @overload
    def __add__(self, arg0: float) -> Tensor: ...
    @overload
    def __add__(self, arg0: int) -> Tensor: ...
    @overload
    def __add__(self, arg0: int) -> Tensor: ...
    @overload
    def __add__(self, arg0: int) -> Tensor: ...
    @overload
    def __add__(self, arg0: int) -> Tensor: ...
    @overload
    def __add__(self, arg0: int) -> Tensor: ...
    @overload
    def __add__(self, arg0: int) -> Tensor: ...
    @overload
    def __add__(self, arg0: int) -> Tensor: ...
    @overload
    def __add__(self, arg0: int) -> Tensor: ...
    @overload
    def __add__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __and__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __and__(self, arg0: float) -> Tensor: ...
    @overload
    def __and__(self, arg0: float) -> Tensor: ...
    @overload
    def __and__(self, arg0: int) -> Tensor: ...
    @overload
    def __and__(self, arg0: int) -> Tensor: ...
    @overload
    def __and__(self, arg0: int) -> Tensor: ...
    @overload
    def __and__(self, arg0: int) -> Tensor: ...
    @overload
    def __and__(self, arg0: int) -> Tensor: ...
    @overload
    def __and__(self, arg0: int) -> Tensor: ...
    @overload
    def __and__(self, arg0: int) -> Tensor: ...
    @overload
    def __and__(self, arg0: int) -> Tensor: ...
    @overload
    def __and__(self, arg0: __builtins__.bool) -> Tensor: ...
    def __bool__(self) -> __builtins__.bool: ...
    @overload
    def __div__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __div__(self, arg0: float) -> Tensor: ...
    @overload
    def __div__(self, arg0: float) -> Tensor: ...
    @overload
    def __div__(self, arg0: int) -> Tensor: ...
    @overload
    def __div__(self, arg0: int) -> Tensor: ...
    @overload
    def __div__(self, arg0: int) -> Tensor: ...
    @overload
    def __div__(self, arg0: int) -> Tensor: ...
    @overload
    def __div__(self, arg0: int) -> Tensor: ...
    @overload
    def __div__(self, arg0: int) -> Tensor: ...
    @overload
    def __div__(self, arg0: int) -> Tensor: ...
    @overload
    def __div__(self, arg0: int) -> Tensor: ...
    @overload
    def __div__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __eq__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __eq__(self, arg0: float) -> Tensor: ...
    @overload
    def __eq__(self, arg0: float) -> Tensor: ...
    @overload
    def __eq__(self, arg0: int) -> Tensor: ...
    @overload
    def __eq__(self, arg0: int) -> Tensor: ...
    @overload
    def __eq__(self, arg0: int) -> Tensor: ...
    @overload
    def __eq__(self, arg0: int) -> Tensor: ...
    @overload
    def __eq__(self, arg0: int) -> Tensor: ...
    @overload
    def __eq__(self, arg0: int) -> Tensor: ...
    @overload
    def __eq__(self, arg0: int) -> Tensor: ...
    @overload
    def __eq__(self, arg0: int) -> Tensor: ...
    @overload
    def __eq__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __floordiv__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __ge__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __ge__(self, arg0: float) -> Tensor: ...
    @overload
    def __ge__(self, arg0: float) -> Tensor: ...
    @overload
    def __ge__(self, arg0: int) -> Tensor: ...
    @overload
    def __ge__(self, arg0: int) -> Tensor: ...
    @overload
    def __ge__(self, arg0: int) -> Tensor: ...
    @overload
    def __ge__(self, arg0: int) -> Tensor: ...
    @overload
    def __ge__(self, arg0: int) -> Tensor: ...
    @overload
    def __ge__(self, arg0: int) -> Tensor: ...
    @overload
    def __ge__(self, arg0: int) -> Tensor: ...
    @overload
    def __ge__(self, arg0: int) -> Tensor: ...
    @overload
    def __ge__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __getitem__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __getitem__(self, arg0: int) -> Tensor: ...
    @overload
    def __getitem__(self, arg0: slice) -> Tensor: ...
    @overload
    def __getitem__(self, arg0: npt.NDArray) -> Tensor: ...
    @overload
    def __getitem__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __getitem__(self, arg0: list) -> Tensor: ...
    @overload
    def __getitem__(self, arg0: tuple) -> Tensor: ...
    @overload
    def __gt__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __gt__(self, arg0: float) -> Tensor: ...
    @overload
    def __gt__(self, arg0: float) -> Tensor: ...
    @overload
    def __gt__(self, arg0: int) -> Tensor: ...
    @overload
    def __gt__(self, arg0: int) -> Tensor: ...
    @overload
    def __gt__(self, arg0: int) -> Tensor: ...
    @overload
    def __gt__(self, arg0: int) -> Tensor: ...
    @overload
    def __gt__(self, arg0: int) -> Tensor: ...
    @overload
    def __gt__(self, arg0: int) -> Tensor: ...
    @overload
    def __gt__(self, arg0: int) -> Tensor: ...
    @overload
    def __gt__(self, arg0: int) -> Tensor: ...
    @overload
    def __gt__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: float) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: float) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: int) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: int) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: int) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: int) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: int) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: int) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: int) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: int) -> Tensor: ...
    @overload
    def __iadd__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __iand__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __iand__(self, arg0: float) -> Tensor: ...
    @overload
    def __iand__(self, arg0: float) -> Tensor: ...
    @overload
    def __iand__(self, arg0: int) -> Tensor: ...
    @overload
    def __iand__(self, arg0: int) -> Tensor: ...
    @overload
    def __iand__(self, arg0: int) -> Tensor: ...
    @overload
    def __iand__(self, arg0: int) -> Tensor: ...
    @overload
    def __iand__(self, arg0: int) -> Tensor: ...
    @overload
    def __iand__(self, arg0: int) -> Tensor: ...
    @overload
    def __iand__(self, arg0: int) -> Tensor: ...
    @overload
    def __iand__(self, arg0: int) -> Tensor: ...
    @overload
    def __iand__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __idiv__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __ifloordiv__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __imul__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __imul__(self, arg0: float) -> Tensor: ...
    @overload
    def __imul__(self, arg0: float) -> Tensor: ...
    @overload
    def __imul__(self, arg0: int) -> Tensor: ...
    @overload
    def __imul__(self, arg0: int) -> Tensor: ...
    @overload
    def __imul__(self, arg0: int) -> Tensor: ...
    @overload
    def __imul__(self, arg0: int) -> Tensor: ...
    @overload
    def __imul__(self, arg0: int) -> Tensor: ...
    @overload
    def __imul__(self, arg0: int) -> Tensor: ...
    @overload
    def __imul__(self, arg0: int) -> Tensor: ...
    @overload
    def __imul__(self, arg0: int) -> Tensor: ...
    @overload
    def __imul__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __ior__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __ior__(self, arg0: float) -> Tensor: ...
    @overload
    def __ior__(self, arg0: float) -> Tensor: ...
    @overload
    def __ior__(self, arg0: int) -> Tensor: ...
    @overload
    def __ior__(self, arg0: int) -> Tensor: ...
    @overload
    def __ior__(self, arg0: int) -> Tensor: ...
    @overload
    def __ior__(self, arg0: int) -> Tensor: ...
    @overload
    def __ior__(self, arg0: int) -> Tensor: ...
    @overload
    def __ior__(self, arg0: int) -> Tensor: ...
    @overload
    def __ior__(self, arg0: int) -> Tensor: ...
    @overload
    def __ior__(self, arg0: int) -> Tensor: ...
    @overload
    def __ior__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __isub__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __isub__(self, arg0: float) -> Tensor: ...
    @overload
    def __isub__(self, arg0: float) -> Tensor: ...
    @overload
    def __isub__(self, arg0: int) -> Tensor: ...
    @overload
    def __isub__(self, arg0: int) -> Tensor: ...
    @overload
    def __isub__(self, arg0: int) -> Tensor: ...
    @overload
    def __isub__(self, arg0: int) -> Tensor: ...
    @overload
    def __isub__(self, arg0: int) -> Tensor: ...
    @overload
    def __isub__(self, arg0: int) -> Tensor: ...
    @overload
    def __isub__(self, arg0: int) -> Tensor: ...
    @overload
    def __isub__(self, arg0: int) -> Tensor: ...
    @overload
    def __isub__(self, arg0: __builtins__.bool) -> Tensor: ...
    def __iter__(self) -> Iterator: ...
    @overload
    def __itruediv__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: float) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: float) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __itruediv__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: float) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: float) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: int) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: int) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: int) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: int) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: int) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: int) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: int) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: int) -> Tensor: ...
    @overload
    def __ixor__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __le__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __le__(self, arg0: float) -> Tensor: ...
    @overload
    def __le__(self, arg0: float) -> Tensor: ...
    @overload
    def __le__(self, arg0: int) -> Tensor: ...
    @overload
    def __le__(self, arg0: int) -> Tensor: ...
    @overload
    def __le__(self, arg0: int) -> Tensor: ...
    @overload
    def __le__(self, arg0: int) -> Tensor: ...
    @overload
    def __le__(self, arg0: int) -> Tensor: ...
    @overload
    def __le__(self, arg0: int) -> Tensor: ...
    @overload
    def __le__(self, arg0: int) -> Tensor: ...
    @overload
    def __le__(self, arg0: int) -> Tensor: ...
    @overload
    def __le__(self, arg0: __builtins__.bool) -> Tensor: ...
    def __len__(self) -> int: ...
    @overload
    def __lt__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __lt__(self, arg0: float) -> Tensor: ...
    @overload
    def __lt__(self, arg0: float) -> Tensor: ...
    @overload
    def __lt__(self, arg0: int) -> Tensor: ...
    @overload
    def __lt__(self, arg0: int) -> Tensor: ...
    @overload
    def __lt__(self, arg0: int) -> Tensor: ...
    @overload
    def __lt__(self, arg0: int) -> Tensor: ...
    @overload
    def __lt__(self, arg0: int) -> Tensor: ...
    @overload
    def __lt__(self, arg0: int) -> Tensor: ...
    @overload
    def __lt__(self, arg0: int) -> Tensor: ...
    @overload
    def __lt__(self, arg0: int) -> Tensor: ...
    @overload
    def __lt__(self, arg0: __builtins__.bool) -> Tensor: ...
    def __matmul__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __mul__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __mul__(self, arg0: float) -> Tensor: ...
    @overload
    def __mul__(self, arg0: float) -> Tensor: ...
    @overload
    def __mul__(self, arg0: int) -> Tensor: ...
    @overload
    def __mul__(self, arg0: int) -> Tensor: ...
    @overload
    def __mul__(self, arg0: int) -> Tensor: ...
    @overload
    def __mul__(self, arg0: int) -> Tensor: ...
    @overload
    def __mul__(self, arg0: int) -> Tensor: ...
    @overload
    def __mul__(self, arg0: int) -> Tensor: ...
    @overload
    def __mul__(self, arg0: int) -> Tensor: ...
    @overload
    def __mul__(self, arg0: int) -> Tensor: ...
    @overload
    def __mul__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __ne__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __ne__(self, arg0: float) -> Tensor: ...
    @overload
    def __ne__(self, arg0: float) -> Tensor: ...
    @overload
    def __ne__(self, arg0: int) -> Tensor: ...
    @overload
    def __ne__(self, arg0: int) -> Tensor: ...
    @overload
    def __ne__(self, arg0: int) -> Tensor: ...
    @overload
    def __ne__(self, arg0: int) -> Tensor: ...
    @overload
    def __ne__(self, arg0: int) -> Tensor: ...
    @overload
    def __ne__(self, arg0: int) -> Tensor: ...
    @overload
    def __ne__(self, arg0: int) -> Tensor: ...
    @overload
    def __ne__(self, arg0: int) -> Tensor: ...
    @overload
    def __ne__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __or__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __or__(self, arg0: float) -> Tensor: ...
    @overload
    def __or__(self, arg0: float) -> Tensor: ...
    @overload
    def __or__(self, arg0: int) -> Tensor: ...
    @overload
    def __or__(self, arg0: int) -> Tensor: ...
    @overload
    def __or__(self, arg0: int) -> Tensor: ...
    @overload
    def __or__(self, arg0: int) -> Tensor: ...
    @overload
    def __or__(self, arg0: int) -> Tensor: ...
    @overload
    def __or__(self, arg0: int) -> Tensor: ...
    @overload
    def __or__(self, arg0: int) -> Tensor: ...
    @overload
    def __or__(self, arg0: int) -> Tensor: ...
    @overload
    def __or__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __radd__(self, arg0: float) -> Tensor: ...
    @overload
    def __radd__(self, arg0: float) -> Tensor: ...
    @overload
    def __radd__(self, arg0: int) -> Tensor: ...
    @overload
    def __radd__(self, arg0: int) -> Tensor: ...
    @overload
    def __radd__(self, arg0: int) -> Tensor: ...
    @overload
    def __radd__(self, arg0: int) -> Tensor: ...
    @overload
    def __radd__(self, arg0: int) -> Tensor: ...
    @overload
    def __radd__(self, arg0: int) -> Tensor: ...
    @overload
    def __radd__(self, arg0: int) -> Tensor: ...
    @overload
    def __radd__(self, arg0: int) -> Tensor: ...
    @overload
    def __radd__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __rand__(self, arg0: float) -> Tensor: ...
    @overload
    def __rand__(self, arg0: float) -> Tensor: ...
    @overload
    def __rand__(self, arg0: int) -> Tensor: ...
    @overload
    def __rand__(self, arg0: int) -> Tensor: ...
    @overload
    def __rand__(self, arg0: int) -> Tensor: ...
    @overload
    def __rand__(self, arg0: int) -> Tensor: ...
    @overload
    def __rand__(self, arg0: int) -> Tensor: ...
    @overload
    def __rand__(self, arg0: int) -> Tensor: ...
    @overload
    def __rand__(self, arg0: int) -> Tensor: ...
    @overload
    def __rand__(self, arg0: int) -> Tensor: ...
    @overload
    def __rand__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rdiv__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: float) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rfloordiv__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: float) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: float) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: int) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: int) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: int) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: int) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: int) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: int) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: int) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: int) -> Tensor: ...
    @overload
    def __rmul__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __ror__(self, arg0: float) -> Tensor: ...
    @overload
    def __ror__(self, arg0: float) -> Tensor: ...
    @overload
    def __ror__(self, arg0: int) -> Tensor: ...
    @overload
    def __ror__(self, arg0: int) -> Tensor: ...
    @overload
    def __ror__(self, arg0: int) -> Tensor: ...
    @overload
    def __ror__(self, arg0: int) -> Tensor: ...
    @overload
    def __ror__(self, arg0: int) -> Tensor: ...
    @overload
    def __ror__(self, arg0: int) -> Tensor: ...
    @overload
    def __ror__(self, arg0: int) -> Tensor: ...
    @overload
    def __ror__(self, arg0: int) -> Tensor: ...
    @overload
    def __ror__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: float) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: float) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: int) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: int) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: int) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: int) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: int) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: int) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: int) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: int) -> Tensor: ...
    @overload
    def __rsub__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: float) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: float) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __rtruediv__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: float) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: float) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: int) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: int) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: int) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: int) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: int) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: int) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: int) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: int) -> Tensor: ...
    @overload
    def __rxor__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __setitem__(self, arg0: __builtins__.bool, arg1: Any) -> Tensor: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Any) -> Tensor: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: Any) -> Tensor: ...
    @overload
    def __setitem__(self, arg0: npt.NDArray, arg1: Any) -> Tensor: ...
    @overload
    def __setitem__(self, arg0: Tensor, arg1: Any) -> Tensor: ...
    @overload
    def __setitem__(self, arg0: list, arg1: Any) -> Tensor: ...
    @overload
    def __setitem__(self, arg0: tuple, arg1: Any) -> Tensor: ...
    @overload
    def __sub__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __sub__(self, arg0: float) -> Tensor: ...
    @overload
    def __sub__(self, arg0: float) -> Tensor: ...
    @overload
    def __sub__(self, arg0: int) -> Tensor: ...
    @overload
    def __sub__(self, arg0: int) -> Tensor: ...
    @overload
    def __sub__(self, arg0: int) -> Tensor: ...
    @overload
    def __sub__(self, arg0: int) -> Tensor: ...
    @overload
    def __sub__(self, arg0: int) -> Tensor: ...
    @overload
    def __sub__(self, arg0: int) -> Tensor: ...
    @overload
    def __sub__(self, arg0: int) -> Tensor: ...
    @overload
    def __sub__(self, arg0: int) -> Tensor: ...
    @overload
    def __sub__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: float) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: float) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: int) -> Tensor: ...
    @overload
    def __truediv__(self, arg0: __builtins__.bool) -> Tensor: ...
    @overload
    def __xor__(self, arg0: Tensor) -> Tensor: ...
    @overload
    def __xor__(self, arg0: float) -> Tensor: ...
    @overload
    def __xor__(self, arg0: float) -> Tensor: ...
    @overload
    def __xor__(self, arg0: int) -> Tensor: ...
    @overload
    def __xor__(self, arg0: int) -> Tensor: ...
    @overload
    def __xor__(self, arg0: int) -> Tensor: ...
    @overload
    def __xor__(self, arg0: int) -> Tensor: ...
    @overload
    def __xor__(self, arg0: int) -> Tensor: ...
    @overload
    def __xor__(self, arg0: int) -> Tensor: ...
    @overload
    def __xor__(self, arg0: int) -> Tensor: ...
    @overload
    def __xor__(self, arg0: int) -> Tensor: ...
    @overload
    def __xor__(self, arg0: __builtins__.bool) -> Tensor: ...
    @property
    def blob(self) -> Blob: ...
    @property
    def device(self) -> Device: ...
    @property
    def dtype(self) -> Dtype: ...
    @property
    def is_cpu(self) -> __builtins__.bool: ...
    @property
    def is_cuda(self) -> __builtins__.bool: ...
    @property
    def ndim(self) -> int: ...
    @property
    def shape(self) -> SizeVector: ...
    @property
    def strides(self) -> SizeVector: ...

def addmm(input: Tensor, A: Tensor, B: Tensor, alpha: float, beta: float) -> Tensor: ...
def append(self: Tensor, values: Tensor, axis: Optional[int] = ...) -> Tensor: ...
def concatenate(tensors: List[Tensor], axis: Optional[int] = ...) -> Tensor: ...
def det(A: Tensor) -> float: ...
def inv(A: Tensor) -> Tensor: ...
def lstsq(A: Tensor, B: Tensor) -> Tensor: ...
def lu(A: Tensor, permute_l: __builtins__.bool = ...) -> tuple: ...
def lu_ipiv(A: Tensor) -> tuple: ...
def matmul(A: Tensor, B: Tensor) -> Tensor: ...
def maximum(input: Tensor, other: Tensor) -> Tensor: ...
def minimum(input: Tensor, other: Tensor) -> Tensor: ...
def solve(A: Tensor, B: Tensor) -> Tensor: ...
def svd(A: Tensor) -> tuple: ...
def sycl_demo() -> int: ...
def tril(A: Tensor, diagonal: int = ...) -> Tensor: ...
def triu(A: Tensor, diagonal: int = ...) -> Tensor: ...
def triul(A: Tensor, diagonal: int = ...) -> tuple: ...

__all__ = [
    "cuda",
    "nns",
    "kernel",
    "bool",
    "bool8",
    "float32",
    "float64",
    "int16",
    "int32",
    "int64",
    "int8",
    "uint16",
    "uint32",
    "uint64",
    "uint8",
    "undefined",
    "Blob",
    "Device",
    "Dtype",
    "DynamicSizeVector",
    "HashMap",
    "HashSet",
    "Scalar",
    "SizeVector",
    "Tensor",
    "addmm",
    "append",
    "concatenate",
    "det",
    "inv",
    "lstsq",
    "lu",
    "lu_ipiv",
    "matmul",
    "maximum",
    "minimum",
    "solve",
    "svd",
    "sycl_demo",
    "tril",
    "triu",
    "triul",
]
